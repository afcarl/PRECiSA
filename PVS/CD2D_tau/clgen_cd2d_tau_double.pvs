% This file is automatically generated by PRECiSA 
% 2016-11-25 16:53:51.788199 UTC

clgen_cd2d_tau_double: THEORY
BEGIN

IMPORTING PRECiSA@bbiasp, PRECiSA@bbiadp, PRECiSA@precIOsa,  PRECiSA@strategies  

r_A, r_B, r_Sx, r_Sy, r_T, r_Vx, r_Vy: real

max_0_aeexpr : string = "0"

max_0_lemma_str : string = "max_c_0 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND (r_A > r_B)
                            AND (A > B)
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(max(A, B)) - r_A)<= ~a~%"
                            

max_1_aeexpr : string = "0"

max_1_lemma_str : string = "max_c_1 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND NOT((r_A > r_B))
                            AND NOT((A > B))
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(max(A, B)) - r_B)<= ~a~%"
                            

max_2_aeexpr : string = "(0 + abs((r_A - r_B)))"

max_2_lemma_str : string = "max_c_2 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND (r_A > r_B)
                            AND NOT((A > B))
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(max(A, B)) - r_A)<= ~a~%"
                            

max_3_aeexpr : string = "(0 + abs((r_B - r_A)))"

max_3_lemma_str : string = "max_c_3 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND NOT((r_A > r_B))
                            AND (A > B)
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(max(A, B)) - r_B)<= ~a~%"
                            
min_0_aeexpr : string = "0"

min_0_lemma_str : string = "min_c_0 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND (r_A < r_B)
                            AND (A < B)
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(min(A, B)) - r_A)<= ~a~%"
                            

min_1_aeexpr : string = "0"

min_1_lemma_str : string = "min_c_1 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND NOT((r_A < r_B))
                            AND NOT((A < B))
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(min(A, B)) - r_B)<= ~a~%"
                            

min_2_aeexpr : string = "(0 + abs((r_A - r_B)))"

min_2_lemma_str : string = "min_c_2 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND (r_A < r_B)
                            AND NOT((A < B))
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(min(A, B)) - r_A)<= ~a~%"
                            

min_3_aeexpr : string = "(0 + abs((r_B - r_A)))"

min_3_lemma_str : string = "min_c_3 : LEMMA
                            FORALL(r_A, r_B: real, A, B: unb_double):
                            abs(DtoR(A) - r_A)<=0 AND abs(DtoR(B) - r_B)<=0
                            AND NOT((r_A < r_B))
                            AND (A < B)
                            AND r_A ## [|-1000,1000|] AND  r_B ## [|-1000,1000|]
                            IMPLIES
                            abs(DtoR(min(A, B)) - r_B)<= ~a~%"
                            
tau_0_aeexpr : string = "0"

tau_0_lemma_str : string = "tau_c_0 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND ((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                            AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - 0)<= ~a~%"
                            

tau_1_aeexpr : string = "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0), (r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0)))"

tau_1_lemma_str : string = "tau_c_1 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                            AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<= ~a~%"
                            

tau_2_aeexpr : string = "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0), (r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0))) + abs((0 - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"

tau_2_lemma_str : string = "tau_c_2 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND ((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                            AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - 0)<= ~a~%"
                            

tau_3_aeexpr : string = "(0 + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - 0)))"

tau_3_lemma_str : string = "tau_c_3 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                            AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<= ~a~%"
                            

tau_4_aeexpr : string = "aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0)))"

tau_4_lemma_str : string = "tau_c_4 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND (NOT((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                            AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                            

tau_5_aeexpr : string = "aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0)))"

tau_5_lemma_str : string = "tau_c_5 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                            AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                            

tau_6_aeexpr : string = "aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0)))"

tau_6_lemma_str : string = "tau_c_6 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND (NOT((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                            AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                            

tau_7_aeexpr : string = "aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0)))"

tau_7_lemma_str : string = "tau_c_7 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                            AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                            

tau_8_aeexpr : string = "(aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0))) + abs((0 - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"

tau_8_lemma_str : string = "tau_c_8 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND ((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                            AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - 0)<= ~a~%"
                            

tau_9_aeexpr : string = "(aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"

tau_9_lemma_str : string = "tau_c_9 : LEMMA
                            FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                            abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                            AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                            AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                            AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                            IMPLIES
                            abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<= ~a~%"
                            

tau_10_aeexpr : string = "(aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0))) + abs((0 - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"

tau_10_lemma_str : string = "tau_c_10 : LEMMA
                             FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                             abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                             AND ((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                             AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                             AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                             IMPLIES
                             abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - 0)<= ~a~%"
                             

tau_11_aeexpr : string = "(aebounddp_mul(r_T, 0, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, 0, r_Vx, 0), (r_Vy * r_Vy), aebounddp_mul(r_Vy, 0, r_Vy, 0))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"

tau_11_lemma_str : string = "tau_c_11 : LEMMA
                             FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                             abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                             AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                             AND (NOT((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                             AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                             IMPLIES
                             abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<= ~a~%"
                             

tau_12_aeexpr : string = "(0 + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - 0)))"

tau_12_lemma_str : string = "tau_c_12 : LEMMA
                             FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                             abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                             AND (NOT((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                             AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                             AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                             IMPLIES
                             abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                             

tau_13_aeexpr : string = "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0), (r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0))) + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"

tau_13_lemma_str : string = "tau_c_13 : LEMMA
                             FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                             abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                             AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                             AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                             AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                             IMPLIES
                             abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                             

tau_14_aeexpr : string = "((aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0), (r_Sx * r_Vx), aebounddp_mul(r_Sx, 0, r_Vx, 0))) + abs((0 - -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))) + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - 0)))"

tau_14_lemma_str : string = "tau_c_14 : LEMMA
                             FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                             abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                             AND (NOT((0 < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND (0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
                             AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
                             AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                             IMPLIES
                             abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                             

tau_15_aeexpr : string = "((0 + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - 0))) + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"

tau_15_lemma_str : string = "tau_c_15 : LEMMA
                             FORALL(r_Sx, r_Sy, r_Vx, r_Vy, r_T: real, Sx, Sy, Vx, Vy, T: unb_double):
                             abs(DtoR(Sx) - r_Sx)<=0 AND abs(DtoR(Sy) - r_Sy)<=0 AND abs(DtoR(Vx) - r_Vx)<=0 AND abs(DtoR(Vy) - r_Vy)<=0 AND abs(DtoR(T) - r_T)<=0
                             AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT((0 > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
                             AND ((max(RtoD(0), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (RtoD(0) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
                             AND r_Sx ## [|-100,100|] AND  r_Sy ## [|-100,100|] AND  r_Vx ## [|-600,600|] AND  r_Vy ## [|-600,600|] AND  r_T ## [|0.083,0.083|]
                             IMPLIES
                             abs(DtoR(tau(Sx, Sy, Vx, Vy, T)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<= ~a~%"
                             
gen(sout: OStream, ranges:list[[string,ProperInterval]], maxdepth:nat, prec:posreal, displayprec:nat): void =
fprintf (sout, "% This file is automatically generated by PRECiSA ~%") &
fprintf (sout, "clemmas_cd2d_tau_double: THEORY ~%") &
fprintf (sout, "BEGIN ~%") &
fprintf (sout, "IMPORTING cert_cd2d_tau_double ~%") &
fprint_lemma (sout)(max_0_lemma_str, max_0_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("max_0", "max_c_0") &
fprint_lemma (sout)(max_1_lemma_str, max_1_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("max_1", "max_c_1") &
fprint_lemma (sout)(max_2_lemma_str, max_2_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("max_2", "max_c_2") &
fprint_lemma (sout)(max_3_lemma_str, max_3_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("max_3", "max_c_3") &
fprint_lemma (sout)(min_0_lemma_str, min_0_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("min_0", "min_c_0") &
fprint_lemma (sout)(min_1_lemma_str, min_1_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("min_1", "min_c_1") &
fprint_lemma (sout)(min_2_lemma_str, min_2_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("min_2", "min_c_2") &
fprint_lemma (sout)(min_3_lemma_str, min_3_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("min_3", "min_c_3") &
fprint_lemma (sout)(tau_0_lemma_str, tau_0_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_0", "tau_c_0") &
fprint_lemma (sout)(tau_1_lemma_str, tau_1_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_1", "tau_c_1") &
fprint_lemma (sout)(tau_2_lemma_str, tau_2_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_2", "tau_c_2") &
fprint_lemma (sout)(tau_3_lemma_str, tau_3_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_3", "tau_c_3") &
fprint_lemma (sout)(tau_4_lemma_str, tau_4_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_4", "tau_c_4") &
fprint_lemma (sout)(tau_5_lemma_str, tau_5_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_5", "tau_c_5") &
fprint_lemma (sout)(tau_6_lemma_str, tau_6_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_6", "tau_c_6") &
fprint_lemma (sout)(tau_7_lemma_str, tau_7_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_7", "tau_c_7") &
fprint_lemma (sout)(tau_8_lemma_str, tau_8_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_8", "tau_c_8") &
fprint_lemma (sout)(tau_9_lemma_str, tau_9_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_9", "tau_c_9") &
fprint_lemma (sout)(tau_10_lemma_str, tau_10_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_10", "tau_c_10") &
fprint_lemma (sout)(tau_11_lemma_str, tau_11_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_11", "tau_c_11") &
fprint_lemma (sout)(tau_12_lemma_str, tau_12_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_12", "tau_c_12") &
fprint_lemma (sout)(tau_13_lemma_str, tau_13_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_13", "tau_c_13") &
fprint_lemma (sout)(tau_14_lemma_str, tau_14_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_14", "tau_c_14") &
fprint_lemma (sout)(tau_15_lemma_str, tau_15_aeexpr, ranges, maxdepth, prec) &
fprint_proof (sout)("tau_15", "tau_c_15") &
fprintf (sout, "END clemmas_cd2d_tau_double ~%")

main : void = 
LET sout = fopenout(create, "clemmas_cd2d_tau_double.pvs"),
    i1:ProperInterval = [|-1000,1000|],
    i2:ProperInterval = [|-1000,1000|],
    i3:ProperInterval = [|-100,100|],
    i4:ProperInterval = [|-100,100|],
    i5:ProperInterval = [|0.083,0.083|],
    i6:ProperInterval = [|-600,600|],
    i7:ProperInterval = [|-600,600|] IN 
gen (sout, (: ("r_A",i1), ("r_B",i2), ("r_Sx",i3), ("r_Sy",i4), ("r_T",i5), ("r_Vx",i6), ("r_Vy",i7) :), 4, 14, 2) & fclose(sout) & printf("File succesfully generated.")

END clgen_cd2d_tau_double
