% This file is automatically generated by PRECiSA 
% 2016-11-25 19:19:52.101171 UTC

cert_cd2d_tauB_double: THEORY
BEGIN
IMPORTING PRECiSA@strategies, cd2d_tauB_double

%|- *_TCC* : PROOF
%|- (try (then (grind-reals) (fail)) (skip) (subtype-tcc))
%|- QED

max_0 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND (r_A > r_B)
AND (A > B)
IMPLIES
abs(DtoR(max(A, B)) - r_A)<=e_A

%|- max_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "max" :assert? none)
%|- (try-simp-ite)
%|- (propax)
%|- )
%|- QED

max_1 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND NOT((r_A > r_B))
AND NOT((A > B))
IMPLIES
abs(DtoR(max(A, B)) - r_B)<=e_B

%|- max_1: PROOF
%|- (then
%|- (skeep)
%|- (expand "max" :assert? none)
%|- (try-simp-ite)
%|- (propax)
%|- )
%|- QED

max_2 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND (r_A > r_B)
AND NOT((A > B))
IMPLIES
abs(DtoR(max(A, B)) - r_A)<=(e_B + abs((r_A - r_B)))

%|- max_2: PROOF
%|- (then
%|- (skeep)
%|- (expand "max" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "abs_dist_other")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "DtoR(B)"
%|-    "r_A"
%|-    "r_B"
%|-    "e_B"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

max_3 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND NOT((r_A > r_B))
AND (A > B)
IMPLIES
abs(DtoR(max(A, B)) - r_B)<=(e_A + abs((r_B - r_A)))

%|- max_3: PROOF
%|- (then
%|- (skeep)
%|- (expand "max" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "abs_dist_other")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "DtoR(A)"
%|-    "r_B"
%|-    "r_A"
%|-    "e_A"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

min_0 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND (r_A < r_B)
AND (A < B)
IMPLIES
abs(DtoR(min(A, B)) - r_A)<=e_A

%|- min_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "min" :assert? none)
%|- (try-simp-ite)
%|- (propax)
%|- )
%|- QED

min_1 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND NOT((r_A < r_B))
AND NOT((A < B))
IMPLIES
abs(DtoR(min(A, B)) - r_B)<=e_B

%|- min_1: PROOF
%|- (then
%|- (skeep)
%|- (expand "min" :assert? none)
%|- (try-simp-ite)
%|- (propax)
%|- )
%|- QED

min_2 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND (r_A < r_B)
AND NOT((A < B))
IMPLIES
abs(DtoR(min(A, B)) - r_A)<=(e_B + abs((r_A - r_B)))

%|- min_2: PROOF
%|- (then
%|- (skeep)
%|- (expand "min" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "abs_dist_other")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "DtoR(B)"
%|-    "r_A"
%|-    "r_B"
%|-    "e_B"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

min_3 : LEMMA
FORALL(e_A, e_B: nonneg_real, r_A, r_B: real, A, B: unb_double):
abs(DtoR(A) - r_A)<=e_A AND abs(DtoR(B) - r_B)<=e_B
AND NOT((r_A < r_B))
AND (A < B)
IMPLIES
abs(DtoR(min(A, B)) - r_B)<=(e_A + abs((r_B - r_A)))

%|- min_3: PROOF
%|- (then
%|- (skeep)
%|- (expand "min" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "abs_dist_other")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "DtoR(A)"
%|-    "r_B"
%|-    "r_A"
%|-    "e_A"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

tau_0 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))

%|- tau_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_1 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<=aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))

%|- tau_1: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_2 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))

%|- tau_2: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_3 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<=(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))

%|- tau_3: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_4 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))

%|- tau_4: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_5 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))

%|- tau_5: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_6 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))

%|- tau_6: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_7 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))

%|- tau_7: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_8 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=(aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))

%|- tau_8: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_9 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<=(aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))

%|- tau_9: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_10 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=(aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))

%|- tau_10: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_11 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND ((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND (NOT((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))<=(aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))

%|- tau_11: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_12 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))

%|- tau_12: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_13 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))

%|- tau_13: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_14 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND ((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND NOT((Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=((aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx)))))) + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))

%|- tau_14: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED

tau_15 : LEMMA
FORALL(e_Sx, e_Sy, e_Vx, e_Vy, e_T, e_B: nonneg_real, r_Sx, r_Sy, r_Vx, r_Vy, r_T, r_B: real, Sx, Sy, Vx, Vy, T, B: unb_double):
abs(DtoR(Sx) - r_Sx)<=e_Sx AND abs(DtoR(Sy) - r_Sy)<=e_Sy AND abs(DtoR(Vx) - r_Vx)<=e_Vx AND abs(DtoR(Vy) - r_Vy)<=e_Vy AND abs(DtoR(T) - r_T)<=e_T AND abs(DtoR(B) - r_B)<=e_B
AND (NOT((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) < (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))) AND NOT(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) > -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))
AND ((max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))) < Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))) AND (Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))) > Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))))
IMPLIES
abs(DtoR(tau(Sx, Sy, Vx, Vy, T, B)) - (r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))<=((aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))))) + abs(((r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))

%|- tau_15: PROOF
%|- (then
%|- (skeep)
%|- (expand "tau" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (branch-lemmas ("min_0"  "min_1"  "min_2"  "min_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
%|-    "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
%|-    "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (branch-lemmas ("max_0"  "max_1"  "max_2"  "max_3")
%|- (then
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
%|-    "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
%|-    "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
%|-    "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
%|-    "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
%|-    "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_B"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_B"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "B"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
%|-    "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
%|-    "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "(r_Sx * r_Vx)"
%|-    "Dmul(Sx, Vx)"
%|-    "Dmul(Sx, Vx)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Sx"
%|-    "e_Vx"
%|-    "r_Sx"
%|-    "r_Vx"
%|-    "Sx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_T"
%|-    "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
%|-    "r_T"
%|-    "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
%|-    "T"
%|-    "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
%|-    "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
%|-    "(r_Vx * r_Vx)"
%|-    "(r_Vy * r_Vy)"
%|-    "Dmul(Vx, Vx)"
%|-    "Dmul(Vy, Vy)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vx"
%|-    "e_Vx"
%|-    "r_Vx"
%|-    "r_Vx"
%|-    "Vx"
%|-    "Vx"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Vy"
%|-    "e_Vy"
%|-    "r_Vy"
%|-    "r_Vy"
%|-    "Vy"
%|-    "Vy"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))))
%|- )
%|- QED


END cert_cd2d_tauB_double