(cert_cd2d_tauB_double
 (max_0 0
  (max_0-1 nil 3690138174
   (""
    (then (skeep) (expand "max" :assert? none) (try-simp-ite) (propax))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (> const-decl "bool" float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (max_1 0
  (max_1-1 nil 3690138174
   (""
    (then (skeep) (expand "max" :assert? none) (try-simp-ite) (propax))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (> const-decl "bool" float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (max_2 0
  (max_2-1 nil 3690138174
   (""
    (then (skeep) (expand "max" :assert? none) (try-simp-ite)
     (then (lemma "abs_dist_other")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs (inst new-label "DtoR(B)" "r_A" "r_B" "e_B"))
          ((branch (split -1)
            ((then (aerr-assert) (fail)) (propax) (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (simplify_ite_name_271 skolem-const-decl "bool"
     cert_cd2d_tauB_double nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs_dist_other formula-decl nil abs_lems "reals/")
    (max const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (max_3 0
  (max_3-1 nil 3690138174
   (""
    (then (skeep) (expand "max" :assert? none) (try-simp-ite)
     (then (lemma "abs_dist_other")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs (inst new-label "DtoR(A)" "r_B" "r_A" "e_A"))
          ((branch (split -1)
            ((then (aerr-assert) (fail)) (propax) (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (> const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (simplify_ite_name_273 skolem-const-decl "bool"
     cert_cd2d_tauB_double nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs_dist_other formula-decl nil abs_lems "reals/")
    (max const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (min_0 0
  (min_0-1 nil 3690138174
   (""
    (then (skeep) (expand "min" :assert? none) (try-simp-ite) (propax))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (< const-decl "bool" float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (min const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (min_1 0
  (min_1-1 nil 3690138174
   (""
    (then (skeep) (expand "min" :assert? none) (try-simp-ite) (propax))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (< const-decl "bool" float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (min const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (min_2 0
  (min_2-1 nil 3690138174
   (""
    (then (skeep) (expand "min" :assert? none) (try-simp-ite)
     (then (lemma "abs_dist_other")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs (inst new-label "DtoR(B)" "r_A" "r_B" "e_B"))
          ((branch (split -1)
            ((then (aerr-assert) (fail)) (propax) (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (simplify_ite_name_277 skolem-const-decl "bool"
     cert_cd2d_tauB_double nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs_dist_other formula-decl nil abs_lems "reals/")
    (min const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (min_3 0
  (min_3-1 nil 3690138174
   (""
    (then (skeep) (expand "min" :assert? none) (try-simp-ite)
     (then (lemma "abs_dist_other")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs (inst new-label "DtoR(A)" "r_B" "r_A" "e_A"))
          ((branch (split -1)
            ((then (aerr-assert) (fail)) (propax) (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (< const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (simplify_ite_name_279 skolem-const-decl "bool"
     cert_cd2d_tauB_double nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (abs_dist_other formula-decl nil abs_lems "reals/")
    (min const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_0 0
  (tau_0-1 nil 3690138174
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_0 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_0 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_1 0
  (tau_1-1 nil 3690138174
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_1 formula-decl nil cert_cd2d_tauB_double nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_0 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_2 0
  (tau_2-1 nil 3690138174
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_2 formula-decl nil cert_cd2d_tauB_double nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_0 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_3 0
  (tau_3-1 nil 3690138174
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_3 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_0 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_4 0
  (tau_4-1 nil 3690138174
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_0 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_1 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_5 0
  (tau_5-1 nil 3690138174
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_1 formula-decl nil cert_cd2d_tauB_double nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_1 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_6 0
  (tau_6-1 nil 3690138174
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_2 formula-decl nil cert_cd2d_tauB_double nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_1 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_7 0
  (tau_7-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_3 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_1 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_8 0
  (tau_8-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_0 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_2 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_9 0
  (tau_9-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_1 formula-decl nil cert_cd2d_tauB_double nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_2 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_10 0
  (tau_10-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_2 formula-decl nil cert_cd2d_tauB_double nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_2 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_11 0
  (tau_11-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_3 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_2 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_12 0
  (tau_12-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_0 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_3 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_13 0
  (tau_13-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_1 formula-decl nil cert_cd2d_tauB_double nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_3 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_14 0
  (tau_14-1 nil 3690138175
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))) + abs(((r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))) - -(((r_Sx * r_Vx) + (r_Sx * r_Vx))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_2 formula-decl nil cert_cd2d_tauB_double nil)
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_3 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak))
 (tau_15 0
  (tau_15-1 nil 3690138176
   (""
    (then (skeep) (expand "tau" :assert? none) (try-simp-ite)
     (then
      (branch-lemmas ("min_0" "min_1" "min_2" "min_3")
       (then
        (let ((new-label (freshname "l")))
          (then (label new-label -1)
           (branch
            (with-tccs
             (inst new-label
              "(aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))) + abs((-(((r_Sx * r_Vx) + (r_Sx * r_Vx))) - (r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy))))))"
              "aebounddp_mul(r_T, e_T, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
              "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
              "(r_T * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
              "max(Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))), Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))))"
              "Dmul(T, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"))
            ((branch (split -1)
              ((then (aerr-assert) (fail))
               (then
                (branch-lemmas ("max_0" "max_1" "max_2" "max_3")
                 (then
                  (let ((new-label (freshname "l")))
                    (then (label new-label -1)
                     (branch
                      (with-tccs
                       (inst new-label
                        "aebounddp_mul(r_B, e_B, ((r_Vx * r_Vx) + (r_Vy * r_Vy)), aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)))"
                        "aebounddp_neg(((r_Sx * r_Vx) + (r_Sx * r_Vx)), aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)))"
                        "(r_B * ((r_Vx * r_Vx) + (r_Vy * r_Vy)))"
                        "-(((r_Sx * r_Vx) + (r_Sx * r_Vx)))"
                        "Dmul(B, Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy)))"
                        "Dneg(Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx)))"))
                      ((branch (split -1)
                        ((then (aerr-assert) (fail))
                         (then (lemma "Dmul_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "e_B"
                                "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                                "r_B"
                                "((r_Vx * r_Vx) + (r_Vy * r_Vy))"
                                "B"
                                "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (propax)
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                                       "(r_Vx * r_Vx)"
                                       "(r_Vy * r_Vy)"
                                       "Dmul(Vx, Vx)"
                                       "Dmul(Vy, Vy)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vx"
                                              "e_Vx"
                                              "r_Vx"
                                              "r_Vx"
                                              "Vx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Vy"
                                              "e_Vy"
                                              "r_Vy"
                                              "r_Vy"
                                              "Vy"
                                              "Vy"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (then (lemma "Dneg_aerr")
                          (let ((new-label (freshname "l")))
                            (then (label new-label -1)
                             (branch
                              (with-tccs
                               (inst
                                new-label
                                "aebounddp_add((r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx), (r_Sx * r_Vx), aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx))"
                                "((r_Sx * r_Vx) + (r_Sx * r_Vx))"
                                "Dadd(Dmul(Sx, Vx), Dmul(Sx, Vx))"))
                              ((branch
                                (split -1)
                                ((then (aerr-assert) (fail))
                                 (then
                                  (lemma "Dadd_aerr")
                                  (let
                                   ((new-label (freshname "l")))
                                   (then
                                    (label new-label -1)
                                    (branch
                                     (with-tccs
                                      (inst
                                       new-label
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "aebounddp_mul(r_Sx, e_Sx, r_Vx, e_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "(r_Sx * r_Vx)"
                                       "Dmul(Sx, Vx)"
                                       "Dmul(Sx, Vx)"))
                                     ((branch
                                       (split -1)
                                       ((then (aerr-assert) (fail))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (then
                                         (lemma "Dmul_aerr")
                                         (let
                                          ((new-label (freshname "l")))
                                          (then
                                           (label new-label -1)
                                           (branch
                                            (with-tccs
                                             (inst
                                              new-label
                                              "e_Sx"
                                              "e_Vx"
                                              "r_Sx"
                                              "r_Vx"
                                              "Sx"
                                              "Vx"))
                                            ((branch
                                              (split -1)
                                              ((then
                                                (aerr-assert)
                                                (fail))
                                               (propax)
                                               (propax)
                                               (assert-condition)))
                                             (assert-condition))))))
                                        (assert-condition)))
                                      (assert-condition))))))
                                 (assert-condition)))
                               (assert-condition))))))
                         (assert-condition)))
                       (assert-condition))))))))
               (then (lemma "Dmul_aerr")
                (let ((new-label (freshname "l")))
                  (then (label new-label -1)
                   (branch
                    (with-tccs
                     (inst new-label "e_T"
                      "aebounddp_add((r_Vx * r_Vx), aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx), (r_Vy * r_Vy), aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy))"
                      "r_T" "((r_Vx * r_Vx) + (r_Vy * r_Vy))" "T"
                      "Dadd(Dmul(Vx, Vx), Dmul(Vy, Vy))"))
                    ((branch (split -1)
                      ((then (aerr-assert) (fail)) (propax)
                       (then (lemma "Dadd_aerr")
                        (let ((new-label (freshname "l")))
                          (then (label new-label -1)
                           (branch
                            (with-tccs
                             (inst new-label
                              "aebounddp_mul(r_Vx, e_Vx, r_Vx, e_Vx)"
                              "aebounddp_mul(r_Vy, e_Vy, r_Vy, e_Vy)"
                              "(r_Vx * r_Vx)" "(r_Vy * r_Vy)"
                              "Dmul(Vx, Vx)" "Dmul(Vy, Vy)"))
                            ((branch (split -1)
                              ((then (aerr-assert) (fail))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vx"
                                     "e_Vx"
                                     "r_Vx"
                                     "r_Vx"
                                     "Vx"
                                     "Vx"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (then
                                (lemma "Dmul_aerr")
                                (let
                                 ((new-label (freshname "l")))
                                 (then
                                  (label new-label -1)
                                  (branch
                                   (with-tccs
                                    (inst
                                     new-label
                                     "e_Vy"
                                     "e_Vy"
                                     "r_Vy"
                                     "r_Vy"
                                     "Vy"
                                     "Vy"))
                                   ((branch
                                     (split -1)
                                     ((then (aerr-assert) (fail))
                                      (propax)
                                      (propax)
                                      (assert-condition)))
                                    (assert-condition))))))
                               (assert-condition)))
                             (assert-condition))))))
                       (assert-condition)))
                     (assert-condition))))))
               (assert-condition)))
             (assert-condition)))))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (max_3 formula-decl nil cert_cd2d_tauB_double nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (nnreal_plus_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (max const-decl "unb_double" cd2d_tauB_double nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl "unb_double" ieee754dp_neg "float/")
    (min_3 formula-decl nil cert_cd2d_tauB_double nil)
    (tau const-decl "unb_double" cd2d_tauB_double nil))
   shostak)))

