precIOsa: THEORY
BEGIN

  IMPORTING interval_arith@strategies

  pvsio_setup: void % (semantically attached) IO setup for experiments.

  print_numerical_rat( expr       : string,
                 var_ranges : list[[string,ProperInterval]],
		 maxdepth   : nat,
		 prec       : posreal): MACRO void =
    LET (iexpr_str,ranges) = expr_vars(expr,var_ranges),
        iexpr:RealExpr = str2pvs[RealExpr](iexpr_str) IN
    printf("~a~%",numerical(maxdepth,prec,altdir_maxvar,0)(iexpr,ranges)`ans`mm`ub)

  numerical_str( expr       : string,
                 var_ranges : list[[string,ProperInterval]],
		 maxdepth   : nat,
		 prec       : posreal): MACRO void =
    LET (iexpr_str,ranges) = expr_vars(expr,var_ranges),
        iexpr:RealExpr = str2pvs[RealExpr](iexpr_str) IN
    print_output(numerical(maxdepth,prec,altdir_maxvar,0)(iexpr,ranges))

  fprint_concrete_lemma  ( sout : OStream )
  	       ( lemma_str  : string,
  	         expr_str   : string,
                 var_ranges : list[[string,ProperInterval]],
		 maxdepth   : nat,
		 prec       : posreal): real =
    LET (iexpr_str,ranges) = expr_vars(expr_str,var_ranges),
        iexpr : RealExpr   = str2pvs[RealExpr](iexpr_str),
	res                = numerical(maxdepth,prec,altdir_maxvar,0)
				      (iexpr,ranges)`ans`mm IN
	IF(res`ub>res`lb)THEN
	  LET bound : real = res`ub,
              dummy : void = fprintf(sout,lemma_str, bound) IN
          bound
	ELSE -1 ENDIF

  concrete_bound  
  	       ( expr_str   : string,
                 var_ranges : list[[string,ProperInterval]],
		 maxdepth   : nat,
		 prec       : posreal): MACRO real =
    LET (iexpr_str,ranges) = expr_vars(expr_str,var_ranges),
        iexpr : RealExpr   = str2pvs[RealExpr](iexpr_str),
	output             = numerical(maxdepth,prec,altdir_maxvar,0)
				      (iexpr,ranges),
	bound : real       = output`ans`mm`ub,
        dummy : void       = print_output(output)
	IN
    bound

  fprint_proof( sout : OStream )
             ( symbolic_lemma_name, concrete_lemma_name: string): void =
    LET proof : string     = " %|- ~a : PROOF ~%" +
    	      		     " %|-   (prove-concrete-lemma$ ~a) ~%" +
                             " %|- QED ~%" IN
      fprintf(sout, proof, (concrete_lemma_name, symbolic_lemma_name))

  fprint_proof( sout : OStream )
             ( symbolic_lemma_name, concrete_lemma_name: string,
	       maxdepth   : nat,
	       prec       : nat): void =
    LET proof : string     = " %|- ~a : PROOF ~%" +
    	      		     " %|-   (prove-concrete-lemma$ ~a ~a ~a) ~%" +
                             " %|- QED ~%" IN
      fprintf(sout, proof, (concrete_lemma_name, symbolic_lemma_name,prec,maxdepth))
			     
  END precIOsa
