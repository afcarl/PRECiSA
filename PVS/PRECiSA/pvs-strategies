(defun unconj-expr-rec (expr)
  (if (is-infix-operator expr 'AND)
      (append (unconj-expr-rec (args1 expr))
	      (unconj-expr-rec (args2 expr)))
    (if (is-prefix-operator expr 'NOT)
	(list (args1 expr))
      (list expr))))

(defstep name-replace-replace (name expr but)
  (then 
   (name-replace name expr)
   (let ((newfml (loop for x in *new-fmla-nums* when (not (= x but)) return x)))
     (if newfml
	 (then (replace newfml) (expand name))
       (expand name))))
  "[PRECiSA]"
  "")

(defun collect-all-path-conditions (expr)
  (cond 
	((typep expr 'mixfix-branch)
	 (append (cons (args1 expr)
		       (collect-all-path-conditions (args2 expr)))
		 (collect-all-path-conditions (nth 2 (exprs(argument expr))))))
	((application? expr)
	 (let ((args(argument expr)))
	   (if (arg-tuple-expr? args)
	       (loop for expr in (exprs args)
		     append (collect-all-path-conditions expr))
	     nil)))
	(t nil)))

(defhelper simplify-ite (fnum)
  (let ((pathconds (collect-all-path-conditions
		    (extra-get-expr `(! ,fnum (->* "IF")))))
	(exprs (loop for pathc in pathconds append (unconj-expr-rec pathc)))
	(stepslist (loop for expr in exprs
		      collect `(let ((name (freshname (symbol-name 'simplify_ite_name))))
				 (name-replace-replace name ,expr ,fnum))))
	(steps (reduce (lambda (sl1 sl2) `(then ,sl1 ,sl2))
			   stepslist
			   :initial-value `(skip)
			   :from-end t)))
    (then steps))
  "[PRECiSA] Simplify ITE using hypothesis in the sequent."
  "Simplifying ITE...")

(defstep try-simp-ite ()
  (then
   (beta)
   (rewrite "neq_rew")
   (let ((lsteps (loop for fnum in *new-fmla-nums*
		       collect `(simplify-ite ,fnum))))
     (if lsteps
	 (try-here$ lsteps :closing? nil)
       (skip))))  
  "Tries to simplify if-then-else expressions on the new formula of the sequent"
  "Trying to simplify abs(IF ... THEN ... ELSE ... ENDIF - <expr>) <= <expr> formula.")

(defun makecases (a terms strict)
  (when terms
    (cons (format nil "~a ~a ~a"
		  a
		  (if (= strict 1) "<" "<=")
		  (car terms))
	  (makecases (car terms) (cdr terms) (- strict 1)))))

(defstep trans-ineq (&optional (fnum 1) terms (strict 0))
  (let ((expr (extra-get-formula fnum)))
    (if (is-relation expr t)
	(let ((a (args1 expr))
	      (b (args2 expr))
	      (myt (if (listp terms) terms (list terms)))
	      (casestr (format nil "~{~a~#[~:; AND ~]~}"
			       (makecases a
					  (append myt (list b))
					  strict))))
	  (then
	   (label "TR" fnum)
	   (spread (case casestr)
		   ((then (flatten) (assert))
		    (then (hide "TR")
			  (split 1))))))
      (skip-msg "Not a suitable formula")))
  "" "")

;;; BEGIN prove-round-off-aerr
;;;
;;; This strategy constructs a proof for
;;; | FPexpr - Rexpr | \leq error
;;; based on the lemmas in aerr754 and the structure of FPexpr
;;;
;;; Parameters:
;;; - fp-expr  PVS expression denoting floating point value
;;; - r-expr   PVS expression denoting real value
;;; - aeb-expr PVS expression denoting accumulated error bound
(defun float-error (msg)
  (throw '*float-error* msg))

(defun roundoff-aerr-proof (fp-expr aeb-expr)
  (catch '*float-error*
		  (roundoff-aerr-proof-rec fp-expr aeb-expr)))

(defun binop-roundoff-proof (fp-expr aeb-expr lemma-name)
  (let*((fpexpr1  (args1 fp-expr))
	(fpexpr2  (args2 fp-expr))
	(aeb-args (exprs(argument aeb-expr)))
	(rexpr1   (nth 0 aeb-args))
	(rexpr2   (nth 2 aeb-args))
	(eexpr1   (nth 1 aeb-args))
	(eexpr2   (nth 3 aeb-args)))
    `(then (lemma ,lemma-name)
	   (with-fresh-labels
	    ((label -1))
	    (with-tccs
	     (inst
	      label
	      ,(format nil "~a" eexpr1)
	      ,(format nil "~a" eexpr2)
	      ,(format nil "~a" rexpr1)
	      ,(format nil "~a" rexpr2)
	      ,(format nil "~a" fpexpr1)
	      ,(format nil "~a" fpexpr2))))
	   (branch (split -1)
		   ((aerr-assert)
		    ,(roundoff-aerr-proof-rec fpexpr1 eexpr1)
		    ,(roundoff-aerr-proof-rec fpexpr2 eexpr2))))))

(defun unop-roundoff-proof (fp-expr aeb-expr lemma-name)
  (let*((fpexpr1  (args1 fp-expr))
	(aeb-args (exprs(argument aeb-expr)))
	(rexpr1   (nth 0 aeb-args))
	(eexpr1   (nth 1 aeb-args)))
    `(then (lemma ,lemma-name)
	   (with-fresh-labels
	    ((label -1))
	    (with-tccs
	     (inst
	      label
	      ,(format nil "~a" eexpr1)
	      ,(format nil "~a" rexpr1)
	      ,(format nil "~a" fpexpr1))))
	   (branch (split -1)
		   ((aerr-assert)
		    ,(roundoff-aerr-proof-rec fpexpr1 eexpr1))))))

(defun roundoff-aerr-proof-rec (fp-expr aeb-expr)
  (cond
   ((is-variable-expr fp-expr)          '(propax))
   ((is-function-expr fp-expr "RtoS")   '(eval-formula))
   ((is-function-expr fp-expr "Fadd")   (binop-roundoff-proof fp-expr aeb-expr "Sadd_aerr"))
   ((is-function-expr fp-expr "Fsub")   (binop-roundoff-proof fp-expr aeb-expr "Ssub_aerr"))
   ((is-function-expr fp-expr "Fmul")   (binop-roundoff-proof fp-expr aeb-expr "Smul_aerr"))
   ((is-function-expr fp-expr "Fdiv")   (binop-roundoff-proof fp-expr aeb-expr "Sdiv_aerr"))
   ((is-function-expr fp-expr "Fsqrt")  (unop-roundoff-proof fp-expr aeb-expr "Ssqrt_aerr"))
   ((is-function-expr fp-expr "Ffloor") (unop-roundoff-proof fp-expr aeb-expr "Sfloor_aerr"))
   (t (float-error
       (format nil
	       "(roundoff-aerr-proof) unrecognized (sub)expression: ~a~%"
	       fp-expr)))))

(defstep prove-roundoff-aerr (&optional (fnum 1))
  (let ((fp-expr  (extra-get-expr `(! ,fnum 1 1 1 1)))
	(aeb-expr (extra-get-expr `(! ,fnum 2)))
	(proof    ;(format nil "~a" aeb-expr)))
	 (roundoff-aerr-proof fp-expr aeb-expr)))
    (if (stringp proof)
	(skip-msg proof)
      (then proof)))
  "" "")
;;; END prove-round-off-aerr

;;; Strategy to prove tcc generated because of the use of float_ops definitions.
(defstep resulting-type-tcc () 
  (then (skeep*)
	(invoke (typepred "%1") (! 1 1))
	(expand* "closest_single?" "closest_double?"))
  "" "")

;; These strategies are intended to be used in proving bound for accumulated
;; floating point rounding errors in user-defined programs.

(defstep var-aerr ()
  (then
    (eval-expr (! 1 2) :quiet? t)
    (replace -1 :hide? t)
    (expand "[||]")) "" "")

(defstep assert-ineqs__ (fnum1 fnum2)
  (with-fresh-labels ((l1 fnum1) (l2 fnum2))
   (spread
   (with-tccs (invoke (case "%1 = %2") (! l1 1) (! l2 1)))
   ((then
     (replace -1 :hide? t)
     (spread
      (with-tccs (invoke (case "%1 = %2") (! l1 2) (! l2 2)))
      ((then
	(replace -1 :hide? t)
	;; if the replace didn't close the branch, then is useless to try to 
	;; close the rest of the branches.
	(fail))
       (then (hide-all-but 1) (assert) (fail)))))
    (then (hide-all-but 1) (assert) (fail)))))
  "[PRECiSA] Try to close "
  "")

(defstep aerr-assert ()
  (then
   (eval-formula :quiet? t)
   (let ((bla-name (freshname "bla")))
     (then
      (expand* ">" ">=")
      (branch
       (prop)
       ((let ((neg-ineqs (get-relations '- '(<=)))
	      (pos-ineqs (get-relations '+ '(<=)))
	      (asserts_leq (loop for nfnum in neg-ineqs
				 append (loop for pfnum in pos-ineqs
					      collect `(assert-ineqs__$ ,nfnum ,pfnum))))
	      (neg-ineqs (get-relations '- '(<)))
	      (pos-ineqs (get-relations '+ '(<)))
	      (asserts_lt  (loop for nfnum in neg-ineqs
				append (loop for pfnum in pos-ineqs
					     collect `(assert-ineqs__$ ,nfnum ,pfnum)))))
	  (then
	   (try-here$ asserts_leq)
	   (try-here$ asserts_lt))))))))
  "[PRECiSA] Specific-purpouse strategy. Intended to close the main branch of proofs about floating point accumulated error calculation."	  
  "Closing main branch...")
  
(defstep disjunctive-hypothesis ()
  (let ((form  (manip-get-formula (car *new-fmla-nums*))))
    (if (or+form? form)
	(let ((exprs (or+ (list form)))
	      (names (freshnames "ABS" (length exprs)))
	      (names-and-exprs (loop for expr in exprs
				     for name in names
				     collect name
				     collect expr)))
	  (then
	   (with-tccs (name-replace* names-and-exprs))
	   (let ((new-fms *new-fmla-nums*)) (hide-all-but new-fms))
	   (prop)))
      (skip)))
  "[PRECiSA] Try to close a hypothesis branch, using disjunctive premises."
  "Proving hypothesis of the main lemma using disjunctive premises...")

(defstrat assert-condition ()
  (try (then 
	(disjunctive-hypothesis)
	(rewrite "neq_rew")
	(rewrite "noteq_rew")
	(eval-formulas :quiet? t)
	(branch (grind-reals) ((fail)))
	(fail))
       (skip)
       (subtype-tcc))
  "[PRECiSA] Try to prove the hypothesis of the main lemma."
  "Proving hypothesis...")

(defstep aerr-rew ()
  (then
   (then 
    (branch (rewrite "noteq_rew_rl1") ((skip) (fail))) 
    (branch (rewrite "noteq_rew_rl2") ((skip) (fail)))
    (assert)))
  "[PRECiSA] Rewritings specific to accumulated error calculations."
  "Rewriting...")

;; General purpose strategies.

(defstep try-here (steplists &optional (closing? t))
  (let ((steplists (if (listp steplists) steplists (list steplists)))
	(try-steps (reduce (lambda (sl1 sl2) `(try (try ,sl1 ,(if closing? '(fail) '(skip)) (skip))
						   (skip) ,sl2))
			   steplists
			   :initial-value `(skip)
			   :from-end t)))
    (then try-steps))
  "[PRECiSA] When CLOSING? is T (default), each of the steps given in STEPLISTS is tried on the current sequent until the branch is closed (CLOSING? is not nil) or the application of a step modifies the sequent (CLOSING? is nil) or the there are no more steps to try."
  "Applying the steps: ~%~{  ~a~%~}")

(defstrat branch-lemmas (lemma-names next-step)
  (let ((lsteps (loop for lname in lemma-names
		      collect `(then (lemma ,lname) ,next-step))))
    (try-here$ lsteps))
  "[PRECiSA] Try to introduce each of the lemmas in LEMMA-NAMES in order, and then apply the step in NEXT_STEP."
  "Applying lemmas: ~%~{~a~%~}")

(defstep connect-ineqs__ (fnum1 fnum2 &optional (precision 3) maxdepth)
  (with-fresh-labels ((l1 fnum1) (l2 fnum2))
   (spread
   (with-tccs (invoke (case "%1 <= %2") (! l1 2) (! l2 2)))
   ((then
     (with-fresh-names ((freshname (! l1 1))) (assert))
	;; if the replace didn't close the branch, then is useless to try to 
	;; close the rest of the branches.
     (fail))
    (then
     (let ((forms (loop for fnum in (map-fnums-arg *)
			when (let ((form (manip-get-formula fnum)))
			       (and (infix-application? form)
				    (eq (id (operator form)) '|##|)))
			collect fnum)) (forms (cons 1 forms)))
       (hide-all-but forms))
     (interval :precision precision :maxdepth maxdepth)))))
  "[PRECiSA] Try to close a branch introducing an explicit link in the transitivity of an inequality."
  "Closing branch using transitivity of <=.")

;; Concrete certificates

(defstep prove-concrete-lemma (symb-bound-lemma-name &optional (precision 3) maxdepth)
 (then (skeep) (use symb-bound-lemma-name)
  (branch (split -1)
	  ((complete-trans$ precision maxdepth)
	   (try (assert) (complete-trans) (fail)))
    (propax) (propax) (propax)))
  "[PRECiSA] Strategy to prove concrete certificates generated by PRECiSA."
  "Trying to prove concrete certificate...")

(defstep complete-trans (&optional (precision 3) maxdepth)
  (let ((bla-name (freshname "bla")))
    (then
     (expand* ">" ">=")
     ;; the disjunctive formulas are not needed in the rest of the proof
     ;; of this branch. Then, they are hidden.
     (let ((or-forms (loop for fnum in (map-fnums-arg *)
			   when (or+form? (manip-get-formula fnum))
			   collect fnum))) (hide or-forms))
     (branch
      (prop)
      ((let ((neg-ineqs (get-relations '- '(<=)))
	     (pos-ineqs (get-relations '+ '(<=)))
	     (asserts_leq (loop for nfnum in neg-ineqs
				append (loop for pfnum in pos-ineqs
					     collect `(connect-ineqs__$
						       ,nfnum
						       ,pfnum
						       ,precision
						       ,maxdepth))))
	     (neg-ineqs (get-relations '- '(<)))
	     (pos-ineqs (get-relations '+ '(<)))
	     (asserts_lt  (loop for nfnum in neg-ineqs
				append (loop for pfnum in pos-ineqs
					     collect `(connect-ineqs__$
						       ,nfnum
						       ,pfnum
						       ,precision
						       ,maxdepth)))))
	 (then
	  (try-here$ asserts_leq)
	  (try-here$ asserts_lt)))))))
  "[PRECiSA] Specific-purpouse strategy. Intended to close the main branch of proofs about floating point accumulated error calculation."	  
  "Closing main branch...")

;; TCCs from symbolic certificates

(defstrat precisa-gen-cert-tcc ()
  (try (then (skeep) (eval-formulas :quiet? t) (fail)) (skip) (try (then (grind-reals) (fail)) (skip) (subtype-tcc)))
  "[PRECiSA] Strategy to prove tccs from PRECiSA generated symbolic certificates."
  "Proving PRECiSA tcc...")
