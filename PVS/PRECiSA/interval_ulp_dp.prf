(interval_ulp_dp
 (IMP_interval_ulp_TCC1 0
  (IMP_interval_ulp_TCC1-1 nil 3683129826
   ("" (skeep)
    (("" (expand "ulp_dp") (("" (use "ulp_abs") nil nil)) nil)) nil)
   ((ulp_dp const-decl "nonneg_real" ieee754dp "float/")
    (ulp_abs formula-decl nil float "float/")
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp
     "float/")
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float "float/")
    (Rounding type-eq-decl nil float "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (EvenClosest? const-decl "bool" float "float/")
    (RestrictedRounding type-eq-decl nil float "float/")
    (dp_closest? const-decl "bool" ieee754dp "float/")
    (RNDF type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (CanonicRoundingFun type-eq-decl nil float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/"))
   nil))
 (IMP_interval_ulp_TCC2 0
  (IMP_interval_ulp_TCC2-1 nil 3683129826
   ("" (skeep)
    (("" (expand "ulp_dp")
      (("" (use "ulp_monotone") (("" (assert) nil nil)) nil)) nil))
    nil)
   ((ulp_dp const-decl "nonneg_real" ieee754dp "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonic_rounding_fun_j name-judgement
     "CanonicRoundingFun[2](double_precision_format, dp_closest?)"
     ieee754dp "float/")
    (dp_closest?_j name-judgement
     "{round: RestrictedRounding[2](double_precision_format, EvenClosest?) |
         rounded_mode?(double_precision_format)(round)}" ieee754dp
     "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float "float/")
    (Rounding type-eq-decl nil float "float/")
    (rounded_mode? const-decl "bool" float "float/")
    (dp_closest? const-decl "bool" ieee754dp "float/")
    (RNDF type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (ulp_monotone formula-decl nil float "float/"))
   nil))
 (IMP_interval_ulp_TCC3 0
  (IMP_interval_ulp_TCC3-1 nil 3683129826
   ("" (skeep)
    (("" (expand "min_Dulp")
      (("" (expand "ulp_dp")
        (("" (expand "ulp") (("" (use "Fulp_min") nil nil)) nil)) nil))
      nil))
    nil)
   ((min_Dulp const-decl "nonneg_real" ieee754dp "float/")
    (ulp const-decl "posreal" float "float/")
    (Fulp_min formula-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float "float/")
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (Fcanonic? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (ulp_dp const-decl "nonneg_real" ieee754dp "float/"))
   nil)))

