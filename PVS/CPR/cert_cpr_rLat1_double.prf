(cert_cpr_rLat1_double
 (rLat1_0_TCC1 0
  (rLat1_0_TCC1-1 nil 3700302384 ("" (precisa-gen-cert-tcc) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (rLat1_0_TCC2 0
  (rLat1_0_TCC2-1 nil 3700302384 ("" (precisa-gen-cert-tcc) nil nil)
   ((TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (rLat1_0 0
  (rLat1_0-1 nil 3700302516
   (""
    (then (skeep) (expand "rLat1" :assert? none) (try-simp-ite)
     (then (lemma "Dmul_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))"
            "aebounddp_add((r_YZ / 131072), aebounddp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aebounddp_flr((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))))"
            "(360 / (60 - 1))"
            "((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))"
            "Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))"
            "Dadd(Ddiv(YZ, RtoD(131072)), Dfloor(Ddiv(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1))))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Ddiv_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "0" "aebounddp_sub(60, 0, 1, 0)"
                    "360" "(60 - 1)" "RtoD(360)"
                    "Dsub(RtoD(60), RtoD(1))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t)
                     (then (lemma "Dsub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "0" "0" "60" "1" "RtoD(60)"
                            "RtoD(1)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Dadd_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_div(r_YZ, e_YZ, 131072, 0)"
                    "aebounddp_flr((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))))"
                    "(r_YZ / 131072)"
                    "floor((r_Lat / (360 / (60 - 1))))"
                    "Ddiv(YZ, RtoD(131072))"
                    "Dfloor(Ddiv(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Ddiv_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_YZ" "0" "r_YZ" "131072"
                            "YZ" "RtoD(131072)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Dfloor_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))"
                            "(r_Lat / (360 / (60 - 1)))"
                            "Ddiv(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1))))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Ddiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_Lat"
                                    "aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))"
                                    "r_Lat"
                                    "(360 / (60 - 1))"
                                    "Lat"
                                    "Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (then
                                      (lemma "Ddiv_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "0"
                                           "aebounddp_sub(60, 0, 1, 0)"
                                           "360"
                                           "(60 - 1)"
                                           "RtoD(360)"
                                           "Dsub(RtoD(60), RtoD(1))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (then
                                             (lemma "Dsub_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "0"
                                                  "0"
                                                  "60"
                                                  "1"
                                                  "RtoD(60)"
                                                  "RtoD(1)"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div "float/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Dfloor const-decl
     "{f: unb_double | closest_double?(floor(DtoR(f1)))(f)}"
     ieee754dp_flr "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebounddp_flr const-decl "nonneg_real" aerr754dp_flr "float/")
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (Dfloor_aerr formula-decl nil aerr754dp_flr "float/")
    (Ddiv_aerr formula-decl nil aerr754dp_div "float/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (rLat1 const-decl "unb_double" cpr_rLat1_double nil))
   shostak))
 (rLat1_1 0
  (rLat1_1-1 nil 3700302516
   (""
    (then (skeep) (expand "rLat1" :assert? none) (try-simp-ite)
     (then (lemma "Dmul_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))"
            "aebounddp_add((r_YZ / 131072), aebounddp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aebounddp_flr_t((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))))"
            "(360 / (60 - 1))"
            "((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))"
            "Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))"
            "Dadd(Ddiv(YZ, RtoD(131072)), Dfloor(Ddiv(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1))))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Ddiv_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "0" "aebounddp_sub(60, 0, 1, 0)"
                    "360" "(60 - 1)" "RtoD(360)"
                    "Dsub(RtoD(60), RtoD(1))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t)
                     (then (lemma "Dsub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "0" "0" "60" "1" "RtoD(60)"
                            "RtoD(1)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Dadd_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_div(r_YZ, e_YZ, 131072, 0)"
                    "aebounddp_flr_t((r_Lat / (360 / (60 - 1))), aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))))"
                    "(r_YZ / 131072)"
                    "floor((r_Lat / (360 / (60 - 1))))"
                    "Ddiv(YZ, RtoD(131072))"
                    "Dfloor(Ddiv(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Ddiv_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_YZ" "0" "r_YZ" "131072"
                            "YZ" "RtoD(131072)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Dfloor_t_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_div(r_Lat, e_Lat, (360 / (60 - 1)), aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0)))"
                            "(r_Lat / (360 / (60 - 1)))"
                            "Ddiv(Lat, Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1))))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Ddiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_Lat"
                                    "aebounddp_div(360, 0, (60 - 1), aebounddp_sub(60, 0, 1, 0))"
                                    "r_Lat"
                                    "(360 / (60 - 1))"
                                    "Lat"
                                    "Ddiv(RtoD(360), Dsub(RtoD(60), RtoD(1)))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (then
                                      (lemma "Ddiv_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "0"
                                           "aebounddp_sub(60, 0, 1, 0)"
                                           "360"
                                           "(60 - 1)"
                                           "RtoD(360)"
                                           "Dsub(RtoD(60), RtoD(1))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (then
                                             (lemma "Dsub_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "0"
                                                  "0"
                                                  "60"
                                                  "1"
                                                  "RtoD(60)"
                                                  "RtoD(1)"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div "float/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (Dfloor const-decl
     "{f: unb_double | closest_double?(floor(DtoR(f1)))(f)}"
     ieee754dp_flr "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebounddp_flr_t const-decl "nonneg_real" aerr754dp_flr "float/")
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (Dfloor_t_aerr formula-decl nil aerr754dp_flr "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (Ddiv_aerr formula-decl nil aerr754dp_div "float/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (rLat1 const-decl "unb_double" cpr_rLat1_double nil))
   shostak)))

