% This file is automatically generated by PRECiSA 
% 2017-04-04 13:37:42.94675 UTC

cert_cpr_rLat1_single: THEORY
BEGIN
IMPORTING PRECiSA@strategies, cpr_rLat1_single

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

rLat1_0 : LEMMA
FORALL(e_YZ, e_Lat: nonneg_real, r_YZ, r_Lat: real, YZ, Lat: unb_single):
abs(StoR(YZ) - r_YZ)<=e_YZ AND abs(StoR(Lat) - r_Lat)<=e_Lat
AND (((StoR(Ssub(RtoS(60), RtoS(1))) /= 0) AND (((59 + aeboundsp_sub(60, 0, 1, 0)) < 0) OR ((59 - aeboundsp_sub(60, 0, 1, 0)) > 0))) AND (((StoR(RtoS(131072)) /= 0) AND (((131072 + 0) < 0) OR ((131072 - 0) > 0))) AND ((((((StoR(Ssub(RtoS(60), RtoS(1))) /= 0) AND (((59 + aeboundsp_sub(60, 0, 1, 0)) < 0) OR ((59 - aeboundsp_sub(60, 0, 1, 0)) > 0))) AND ((360 / 59) /= 0)) AND (StoR(Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))) /= 0)) AND ((((360 / 59) + aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))) < 0) OR (((360 / 59) - aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))) > 0))) AND ((floor((r_Lat / (360 / 59))) /= floor(((r_Lat / (360 / 59)) - aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))))) OR (floor((r_Lat / (360 / 59))) /= floor(((r_Lat / (360 / 59)) + aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))))))))
AND TRUE
IMPLIES
abs(StoR(rLat1(YZ, Lat)) - ((360 / (60 - 1)) * ((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))))<=aeboundsp_mul((360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)), ((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1))))), aeboundsp_add((r_YZ / 131072), aeboundsp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aeboundsp_flr((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))))

%|- rLat1_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "rLat1" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
%|-    "aeboundsp_add((r_YZ / 131072), aeboundsp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aeboundsp_flr((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))))"
%|-    "(360 / (60 - 1))"
%|-    "((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))"
%|-    "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"
%|-    "Sadd(Sdiv(YZ, RtoS(131072)), Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aeboundsp_sub(60, 0, 1, 0)"
%|-    "360"
%|-    "(60 - 1)"
%|-    "RtoS(360)"
%|-    "Ssub(RtoS(60), RtoS(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "60"
%|-    "1"
%|-    "RtoS(60)"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Sadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aeboundsp_div(r_YZ, e_YZ, 131072, 0)"
%|-    "aeboundsp_flr((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))"
%|-    "(r_YZ / 131072)"
%|-    "floor((r_Lat / (360 / (60 - 1))))"
%|-    "Sdiv(YZ, RtoS(131072))"
%|-    "Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_YZ"
%|-    "0"
%|-    "r_YZ"
%|-    "131072"
%|-    "YZ"
%|-    "RtoS(131072)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Sfloor_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))"
%|-    "(r_Lat / (360 / (60 - 1)))"
%|-    "Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Lat"
%|-    "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
%|-    "r_Lat"
%|-    "(360 / (60 - 1))"
%|-    "Lat"
%|-    "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aeboundsp_sub(60, 0, 1, 0)"
%|-    "360"
%|-    "(60 - 1)"
%|-    "RtoS(360)"
%|-    "Ssub(RtoS(60), RtoS(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "60"
%|-    "1"
%|-    "RtoS(60)"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED

rLat1_1 : LEMMA
FORALL(e_YZ, e_Lat: nonneg_real, r_YZ, r_Lat: real, YZ, Lat: unb_single):
abs(StoR(YZ) - r_YZ)<=e_YZ AND abs(StoR(Lat) - r_Lat)<=e_Lat
AND (((StoR(Ssub(RtoS(60), RtoS(1))) /= 0) AND (((59 + aeboundsp_sub(60, 0, 1, 0)) < 0) OR ((59 - aeboundsp_sub(60, 0, 1, 0)) > 0))) AND (((StoR(RtoS(131072)) /= 0) AND (((131072 + 0) < 0) OR ((131072 - 0) > 0))) AND ((((((StoR(Ssub(RtoS(60), RtoS(1))) /= 0) AND (((59 + aeboundsp_sub(60, 0, 1, 0)) < 0) OR ((59 - aeboundsp_sub(60, 0, 1, 0)) > 0))) AND ((360 / 59) /= 0)) AND (StoR(Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))) /= 0)) AND ((((360 / 59) + aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))) < 0) OR (((360 / 59) - aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))) > 0))) AND ((floor((r_Lat / (360 / 59))) = floor(((r_Lat / (360 / 59)) - aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))))) AND (floor((r_Lat / (360 / 59))) = floor(((r_Lat / (360 / 59)) + aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))))))))
AND TRUE
IMPLIES
abs(StoR(rLat1(YZ, Lat)) - ((360 / (60 - 1)) * ((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))))<=aeboundsp_mul((360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)), ((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1))))), aeboundsp_add((r_YZ / 131072), aeboundsp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aeboundsp_flr_t((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))))

%|- rLat1_1: PROOF
%|- (then
%|- (skeep)
%|- (expand "rLat1" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Smul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
%|-    "aeboundsp_add((r_YZ / 131072), aeboundsp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aeboundsp_flr_t((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))))"
%|-    "(360 / (60 - 1))"
%|-    "((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))"
%|-    "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"
%|-    "Sadd(Sdiv(YZ, RtoS(131072)), Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aeboundsp_sub(60, 0, 1, 0)"
%|-    "360"
%|-    "(60 - 1)"
%|-    "RtoS(360)"
%|-    "Ssub(RtoS(60), RtoS(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "60"
%|-    "1"
%|-    "RtoS(60)"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Sadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aeboundsp_div(r_YZ, e_YZ, 131072, 0)"
%|-    "aeboundsp_flr_t((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))"
%|-    "(r_YZ / 131072)"
%|-    "floor((r_Lat / (360 / (60 - 1))))"
%|-    "Sdiv(YZ, RtoS(131072))"
%|-    "Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_YZ"
%|-    "0"
%|-    "r_YZ"
%|-    "131072"
%|-    "YZ"
%|-    "RtoS(131072)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Sfloor_t_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))"
%|-    "(r_Lat / (360 / (60 - 1)))"
%|-    "Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Lat"
%|-    "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
%|-    "r_Lat"
%|-    "(360 / (60 - 1))"
%|-    "Lat"
%|-    "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Sdiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aeboundsp_sub(60, 0, 1, 0)"
%|-    "360"
%|-    "(60 - 1)"
%|-    "RtoS(360)"
%|-    "Ssub(RtoS(60), RtoS(1))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Ssub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "60"
%|-    "1"
%|-    "RtoS(60)"
%|-    "RtoS(1)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_cpr_rLat1_single