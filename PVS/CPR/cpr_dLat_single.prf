(cpr_dLat_single
 (dLat_TCC1 0
  (dLat_TCC1-1 nil 3700258918 ("" (subtype-tcc) nil nil)
   ((- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (StoR const-decl "real" ieee754sp "float/")
    (/= const-decl "boolean" notequal nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (Fnormal? const-decl "bool" float "float/")
    (Fsubnormal? const-decl "bool" float "float/")
    (minus_rat_is_rat application-judgement "rat" rationals nil)
    (rndmaxismax_j application-judgement
     "CanonicRoundingFun[2](b, isMax?(b))" ieee754sp "float/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rndminismin_j application-judgement
     "CanonicRoundingFun[2](b, isMin?(b))" ieee754sp "float/")
    (rndeclosest_j application-judgement
     "CanonicRoundingFun[2](b, EvenClosest?(b))" ieee754sp "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
         exact_rep_conservation[2]
             (single_precision_format, sp_closest?)(RtoF)}" ieee754sp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (int_abs_is_nonneg application-judgement "{j: nonneg_int | j >= i}"
     real_defs nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (^ const-decl "real" exponentiation nil)
    (vNum const-decl "posnat" float "float/")
    (RND_Min const-decl "(Fcanonic?(b))" float "float/")
    (FtoR const-decl "real" float "float/")
    (Fopp const-decl "float" float "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     cr_sub "float/")
    (Ssub const-decl
     "{f: unb_single | closest_single?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754sp_sub "float/")
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil)))

