(cert_cpr_rLat1_single
 (rLat1_0_TCC1 0
  (rLat1_0_TCC1-1 nil 3700302484 ("" (precisa-gen-cert-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (rat_plus_rat_is_rat application-judgement "rat" rationals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (minus_int_is_int application-judgement "int" integers nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posnat_expt application-judgement "posnat" exponentiation nil)
    (aeboundsp_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (ulp_sp const-decl "nonneg_real" ieee754sp "float/")
    (ulp const-decl "posreal" float "float/")
    (Fulp const-decl "real" float "float/")
    (sub_ulp_bound const-decl "real" accum_err_sub "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (sub_aerr_bound const-decl "nonneg_real" accum_err_sub "float/")
    (Ssub const-decl
     "{f: unb_single | closest_single?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754sp_sub "float/")
    (Fsub const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(FtoR(f1) - FtoR(f2), f3)}"
     cr_sub "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fbounded? const-decl "bool" float "float/")
    (sp_closest? const-decl "bool" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (Fg const-decl
     "{f3: (Fcanonic?(b)) | Closest?(b)(g(FtoR(f1), FtoR(f2)), f3)}"
     binop_em_scheme "float/")
    (StoR const-decl "real" ieee754sp "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (RND_Max const-decl "(Fcanonic?(b))" float "float/")
    (Fopp const-decl "float" float "float/")
    (FtoR const-decl "real" float "float/")
    (RND_Min const-decl "(Fcanonic?(b))" float "float/")
    (vNum const-decl "posnat" float "float/")
    (^ const-decl "real" exponentiation nil)
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (NOT const-decl "[bool -> bool]" booleans nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil))
   nil))
 (rLat1_0_TCC2 0
  (rLat1_0_TCC2-1 nil 3700302484 ("" (precisa-gen-cert-tcc) nil nil)
   ((posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
         exact_rep_conservation[2]
             (single_precision_format, sp_closest?)(RtoF)}" ieee754sp
     "float/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (rLat1_0_TCC3 0
  (rLat1_0_TCC3-1 nil 3700302484 ("" (precisa-gen-cert-tcc) nil nil)
   ((posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
         exact_rep_conservation[2]
             (single_precision_format, sp_closest?)(RtoF)}" ieee754sp
     "float/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (FALSE const-decl "bool" booleans nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (rLat1_0 0
  (rLat1_0-1 nil 3700302516
   (""
    (then (skeep) (expand "rLat1" :assert? none) (try-simp-ite)
     (then (lemma "Smul_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
            "aeboundsp_add((r_YZ / 131072), aeboundsp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aeboundsp_flr((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))))"
            "(360 / (60 - 1))"
            "((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))"
            "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"
            "Sadd(Sdiv(YZ, RtoS(131072)), Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Sdiv_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "0" "aeboundsp_sub(60, 0, 1, 0)"
                    "360" "(60 - 1)" "RtoS(360)"
                    "Ssub(RtoS(60), RtoS(1))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t)
                     (then (lemma "Ssub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "0" "0" "60" "1" "RtoS(60)"
                            "RtoS(1)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Sadd_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aeboundsp_div(r_YZ, e_YZ, 131072, 0)"
                    "aeboundsp_flr((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))"
                    "(r_YZ / 131072)"
                    "floor((r_Lat / (360 / (60 - 1))))"
                    "Sdiv(YZ, RtoS(131072))"
                    "Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Sdiv_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_YZ" "0" "r_YZ" "131072"
                            "YZ" "RtoS(131072)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Sfloor_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))"
                            "(r_Lat / (360 / (60 - 1)))"
                            "Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Sdiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_Lat"
                                    "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
                                    "r_Lat"
                                    "(360 / (60 - 1))"
                                    "Lat"
                                    "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (then
                                      (lemma "Sdiv_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "0"
                                           "aeboundsp_sub(60, 0, 1, 0)"
                                           "360"
                                           "(60 - 1)"
                                           "RtoS(360)"
                                           "Ssub(RtoS(60), RtoS(1))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (then
                                             (lemma "Ssub_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "0"
                                                  "0"
                                                  "60"
                                                  "1"
                                                  "RtoS(60)"
                                                  "RtoS(1)"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Smul_aerr formula-decl nil aerr754sp_mul "float/")
    (aeboundsp_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (aeboundsp_div const-decl "nonneg_real" aerr754sp_div "float/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Sfloor const-decl
     "{f: unb_single | closest_single?(floor(FtoR(f1)))(f)}"
     ieee754sp_flr "float/")
    (Sadd const-decl
     "{f: unb_single | closest_single?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754sp_add "float/")
    (Ssub const-decl
     "{f: unb_single | closest_single?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754sp_sub "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (Sdiv const-decl
     "{f: unb_single | closest_single?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754sp_div "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (FtoR const-decl "real" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aeboundsp_flr const-decl "nonneg_real" aerr754sp_flr "float/")
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (aeboundsp_add const-decl "nonneg_real" aerr754sp_add "float/")
    (Sadd_aerr formula-decl nil aerr754sp_add "float/")
    (Sfloor_aerr formula-decl nil aerr754sp_flr "float/")
    (Sdiv_aerr formula-decl nil aerr754sp_div "float/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (StoR const-decl "real" ieee754sp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Ssub_aerr formula-decl nil aerr754sp_sub "float/")
    (rLat1 const-decl "unb_single" cpr_rLat1_single nil))
   shostak))
 (rLat1_1 0
  (rLat1_1-1 nil 3700302517
   (""
    (then (skeep) (expand "rLat1" :assert? none) (try-simp-ite)
     (then (lemma "Smul_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
            "aeboundsp_add((r_YZ / 131072), aeboundsp_div(r_YZ, e_YZ, 131072, 0), floor((r_Lat / (360 / (60 - 1)))), aeboundsp_flr_t((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))))"
            "(360 / (60 - 1))"
            "((r_YZ / 131072) + floor((r_Lat / (360 / (60 - 1)))))"
            "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"
            "Sadd(Sdiv(YZ, RtoS(131072)), Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Sdiv_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "0" "aeboundsp_sub(60, 0, 1, 0)"
                    "360" "(60 - 1)" "RtoS(360)"
                    "Ssub(RtoS(60), RtoS(1))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t)
                     (then (lemma "Ssub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "0" "0" "60" "1" "RtoS(60)"
                            "RtoS(1)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Sadd_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aeboundsp_div(r_YZ, e_YZ, 131072, 0)"
                    "aeboundsp_flr_t((r_Lat / (360 / (60 - 1))), aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))))"
                    "(r_YZ / 131072)"
                    "floor((r_Lat / (360 / (60 - 1))))"
                    "Sdiv(YZ, RtoS(131072))"
                    "Sfloor(Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Sdiv_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_YZ" "0" "r_YZ" "131072"
                            "YZ" "RtoS(131072)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Sfloor_t_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aeboundsp_div(r_Lat, e_Lat, (360 / (60 - 1)), aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0)))"
                            "(r_Lat / (360 / (60 - 1)))"
                            "Sdiv(Lat, Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1))))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Sdiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_Lat"
                                    "aeboundsp_div(360, 0, (60 - 1), aeboundsp_sub(60, 0, 1, 0))"
                                    "r_Lat"
                                    "(360 / (60 - 1))"
                                    "Lat"
                                    "Sdiv(RtoS(360), Ssub(RtoS(60), RtoS(1)))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (then
                                      (lemma "Sdiv_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "0"
                                           "aeboundsp_sub(60, 0, 1, 0)"
                                           "360"
                                           "(60 - 1)"
                                           "RtoS(360)"
                                           "Ssub(RtoS(60), RtoS(1))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (then
                                             (lemma "Ssub_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "0"
                                                  "0"
                                                  "60"
                                                  "1"
                                                  "RtoS(60)"
                                                  "RtoS(1)"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_times_real_is_real application-judgement "real" reals nil)
    (rat_times_rat_is_rat application-judgement "rat" rationals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Smul_aerr formula-decl nil aerr754sp_mul "float/")
    (aeboundsp_div const-decl "nonneg_real" aerr754sp_div "float/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (aeboundsp_sub const-decl "nonneg_real" aerr754sp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (even_minus_odd_is_odd application-judgement "odd_int" integers
     nil)
    (nzrat_div_nzrat_is_nzrat application-judgement "nzrat" rationals
     nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (Sfloor const-decl
     "{f: unb_single | closest_single?(floor(FtoR(f1)))(f)}"
     ieee754sp_flr "float/")
    (Sadd const-decl
     "{f: unb_single | closest_single?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754sp_add "float/")
    (Ssub const-decl
     "{f: unb_single | closest_single?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754sp_sub "float/")
    (RtoS const-decl "{f: unb_single | closest_single?(x1)(f)}"
     ieee754sp "float/")
    (Sdiv const-decl
     "{f: unb_single | closest_single?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754sp_div "float/")
    (closest_single? const-decl "bool" ieee754sp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (FtoR const-decl "real" float "float/")
    (unb_single type-eq-decl nil ieee754sp "float/")
    (single_precision_format const-decl "Format" ieee754sp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aeboundsp_flr_t const-decl "nonneg_real" aerr754sp_flr "float/")
    (floor const-decl "{i | i <= x & x < i + 1}" floor_ceil nil)
    (<= const-decl "bool" reals nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (integer nonempty-type-from-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (aeboundsp_add const-decl "nonneg_real" aerr754sp_add "float/")
    (Sadd_aerr formula-decl nil aerr754sp_add "float/")
    (Sfloor_t_aerr formula-decl nil aerr754sp_flr "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(single_precision_format, sp_closest?) |
         exact_rep_conservation[2]
             (single_precision_format, sp_closest?)(RtoF)}" ieee754sp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (Sdiv_aerr formula-decl nil aerr754sp_div "float/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (StoR const-decl "real" ieee754sp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (FALSE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Ssub_aerr formula-decl nil aerr754sp_sub "float/")
    (rLat1 const-decl "unb_single" cpr_rLat1_single nil))
   shostak)))

