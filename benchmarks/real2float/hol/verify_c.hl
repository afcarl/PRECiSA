needs "tests/utils.hl";;

path := fptaylor_path ^ "/benchmarks/real2float/hol";;

let add_result, get_result, print_results =
  let results = ref [] in
  let add name th time = 
    let _ = results := !results @ [name, (th, time)] in th in
  let get name = assoc name !results in
  let print1 (name, (th, time)) =
    let tm = rand (rand (snd (strip_forall (concl th)))) in
      report (sprintf "%s (time = %f): %s" name time (string_of_term tm)) in
  let print () =
    let _ = map print1 !results in () in
    add, get, print;;

let pp = 10;;
 

let form_th, bound_th, time = validate pp "doppler1_c.proof";;
add_result "doppler1_c" (trans_bound bound_th `#1.086 * &10 ipow (-- &13)`) time;;

let form_th, bound_th, time = validate pp "doppler2_c.proof";;
add_result "doppler2_c" (trans_bound bound_th `#1.953 * &10 ipow (-- &13)`) time;;

let form_th, bound_th, time = validate pp "doppler3_c.proof";;
add_result "doppler3_c" (trans_bound bound_th `#5.897 * &10 ipow (-- &14)`) time;;

let form_th, bound_th, time = validate pp "rigidBody1_c.proof";;
add_result "rigidBody1_c" (trans_bound bound_th `#3.048 * &10 ipow (-- &13)`) time;;

let form_th, bound_th, time = validate pp "rigidBody2_c.proof";;
add_result "rigidBody2_c" (trans_bound bound_th `#3.898 * &10 ipow (-- &11)`) time;;

let form_th, bound_th, time = validate pp "verhulst_c.proof";;
add_result "verhulst_c" (trans_bound bound_th `#2.354 * &10 ipow (-- &16)`) time;;

let form_th, bound_th, time = validate pp "carbonGas_c.proof";;
add_result "carbonGas_c" (trans_bound bound_th `#8.005 * &10 ipow (-- &9)`) time;;

let form_th, bound_th, time = validate pp "predPrey_c.proof";;
add_result "predPrey_c" (trans_bound bound_th `#1.212 * &10 ipow (-- &16)`) time;;

let form_th, bound_th, time = validate pp "kepler0_c.proof";;
add_result "kepler0_c" (trans_bound bound_th `#7.632 * &10 ipow (-- &14)`) time;;

let form_th, bound_th, time = validate pp "kepler1_c.proof";;
add_result "kepler1_c" (trans_bound bound_th `#2.705 * &10 ipow (-- &13)`) time;;

let form_th, bound_th, time = validate pp "kepler2_c.proof";;
add_result "kepler2_c" (trans_bound bound_th `#1.844 * &10 ipow (-- &12)`) time;;

let form_th, bound_th, time = validate pp "sineTaylor_c.proof";;
add_result "sineTaylor_c" (trans_bound bound_th `#5.566 * &10 ipow (-- &16)`) time;;

let form_th, bound_th, time = validate pp "sineOrder3_c.proof";;
add_result "sineOrder3_c" (trans_bound bound_th `#6.586 * &10 ipow (-- &16)`) time;;

let form_th, bound_th, time = validate pp "sqroot_c.proof";;
add_result "sqroot_c" (trans_bound bound_th `#6.852 * &10 ipow (-- &16)`) time;;

let form_th, bound_th, time = validate pp "floudas1_c.proof";;
add_result "floudas1_c" (trans_bound bound_th `#4.619 * &10 ipow (-- &13)`) time;;

let form_th, bound_th, time = validate pp "floudas2_c.proof";;
add_result "floudas2_c" (trans_bound bound_th `#7.772 * &10 ipow (-- &16)`) time;;

let form_th, bound_th, time = validate pp "floudas3_c.proof";;
add_result "floudas3_c" (trans_bound bound_th `#1.511 * &10 ipow (-- &14)`) time;;

let form_th, bound_th, time = validate pp "logexp_c.proof";;
add_result "logexp_c" (trans_bound bound_th `#1.619 * &10 ipow (-- &15)`) time;;

let form_th, bound_th, time = validate pp "sphere_c.proof";;
add_result "sphere_c" (trans_bound bound_th `#7.772 * &10 ipow (-- &15)`) time;;

(*
(* 19498.9 *)
let form_th, bound_th, time = validate pp "hartman3_c.proof";;
add_result "hartman3_c" (trans_bound bound_th `#3.076 * &10 ipow (-- &15)`) time;;

(* 5409.2 *)
let form_th, bound_th, time = validate pp "hartman6_c.proof";;
add_result "hartman6_c" (trans_bound bound_th `#8.025 * &10 ipow (-- &15)`) time;;
*)

(* approximate bounds *)
let form_th, bound_th, time = validate_gen pp "hartman3_c.proof" 1.496e-13;;
add_result "hartman3_c (approx)" (trans_bound bound_th `#1.497 * &10 ipow (-- &13)`) time;;

let form_th, bound_th, time = validate_gen pp "hartman6_c.proof" 1.947e-13;;
add_result "hartman6_c (approx)" (trans_bound bound_th `#1.948 * &10 ipow (-- &13)`) time;;


print_results();;
