(cert_sqroot
 (sqroot_0 0
  (sqroot_0-1 nil 3706901903
   (""
    (then (skeep) (expand "sqroot" :assert? none) (try-simp-ite)
     (then (lemma "Dadd_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label "0"
            "aebounddp_sub(((1 / 2) * r_Y), aebounddp_mul((1 / 2), (0 / 1), r_Y, e_Y), (((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))), aebounddp_add(((1 / 8) * (r_Y * r_Y)), aebounddp_mul((1 / 8), (0 / 1), (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)), (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))), aebounddp_sub(((1 / 16) * (r_Y * (r_Y * r_Y))), aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))), ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))), aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))))))"
            "1"
            "(((1 / 2) * r_Y) - (((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))))"
            "RtoD(1)"
            "Dsub(Dmul(RtoD((1 / 2)), Y), Dadd(Dmul(RtoD((1 / 8)), Dmul(Y, Y)), Dsub(Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y))), Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y)))))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail)) (eval-formulas + :quiet? t)
             (then (lemma "Dsub_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_mul((1 / 2), (0 / 1), r_Y, e_Y)"
                    "aebounddp_add(((1 / 8) * (r_Y * r_Y)), aebounddp_mul((1 / 8), (0 / 1), (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)), (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))), aebounddp_sub(((1 / 16) * (r_Y * (r_Y * r_Y))), aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))), ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))), aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))))))"
                    "((1 / 2) * r_Y)"
                    "(((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))))"
                    "Dmul(RtoD((1 / 2)), Y)"
                    "Dadd(Dmul(RtoD((1 / 8)), Dmul(Y, Y)), Dsub(Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y))), Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y))))))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Dmul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "(0 / 1)" "e_Y" "(1 / 2)"
                            "r_Y" "RtoD((1 / 2))" "Y"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t) (propax)
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Dadd_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_mul((1 / 8), (0 / 1), (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))"
                            "aebounddp_sub(((1 / 16) * (r_Y * (r_Y * r_Y))), aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))), ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))), aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))))"
                            "((1 / 8) * (r_Y * r_Y))"
                            "(((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))"
                            "Dmul(RtoD((1 / 8)), Dmul(Y, Y))"
                            "Dsub(Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y))), Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y)))))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "(0 / 1)"
                                    "aebounddp_mul(r_Y, e_Y, r_Y, e_Y)"
                                    "(1 / 8)"
                                    "(r_Y * r_Y)"
                                    "RtoD((1 / 8))"
                                    "Dmul(Y, Y)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_Y"
                                           "e_Y"
                                           "r_Y"
                                           "r_Y"
                                           "Y"
                                           "Y"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Dsub_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))"
                                    "aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))))"
                                    "((1 / 16) * (r_Y * (r_Y * r_Y)))"
                                    "((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))"
                                    "Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y)))"
                                    "Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y))))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "(0 / 1)"
                                           "aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))"
                                           "(1 / 16)"
                                           "(r_Y * (r_Y * r_Y))"
                                           "RtoD((1 / 16))"
                                           "Dmul(Y, Dmul(Y, Y))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (then
                                             (lemma "Dmul_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "e_Y"
                                                  "aebounddp_mul(r_Y, e_Y, r_Y, e_Y)"
                                                  "r_Y"
                                                  "(r_Y * r_Y)"
                                                  "Y"
                                                  "Dmul(Y, Y)"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (propax)
                                                   (then
                                                    (lemma "Dmul_aerr")
                                                    (let
                                                     ((new-label
                                                       (freshname
                                                        "l")))
                                                     (then
                                                      (label
                                                       new-label
                                                       -1)
                                                      (branch
                                                       (with-tccs
                                                        (inst
                                                         new-label
                                                         "e_Y"
                                                         "e_Y"
                                                         "r_Y"
                                                         "r_Y"
                                                         "Y"
                                                         "Y"))
                                                       ((branch
                                                         (split -1)
                                                         ((then
                                                           (aerr-assert)
                                                           (fail))
                                                          (propax)
                                                          (propax)
                                                          (assert-condition)))
                                                        (assert-condition))))))
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "(0 / 1)"
                                           "aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))"
                                           "(5 / 128)"
                                           "(r_Y * (r_Y * (r_Y * r_Y)))"
                                           "RtoD((5 / 128))"
                                           "Dmul(Y, Dmul(Y, Dmul(Y, Y)))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (then
                                             (lemma "Dmul_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "e_Y"
                                                  "aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))"
                                                  "r_Y"
                                                  "(r_Y * (r_Y * r_Y))"
                                                  "Y"
                                                  "Dmul(Y, Dmul(Y, Y))"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (propax)
                                                   (then
                                                    (lemma "Dmul_aerr")
                                                    (let
                                                     ((new-label
                                                       (freshname
                                                        "l")))
                                                     (then
                                                      (label
                                                       new-label
                                                       -1)
                                                      (branch
                                                       (with-tccs
                                                        (inst
                                                         new-label
                                                         "e_Y"
                                                         "aebounddp_mul(r_Y, e_Y, r_Y, e_Y)"
                                                         "r_Y"
                                                         "(r_Y * r_Y)"
                                                         "Y"
                                                         "Dmul(Y, Y)"))
                                                       ((branch
                                                         (split -1)
                                                         ((then
                                                           (aerr-assert)
                                                           (fail))
                                                          (propax)
                                                          (then
                                                           (lemma
                                                            "Dmul_aerr")
                                                           (let
                                                            ((new-label
                                                              (freshname
                                                               "l")))
                                                            (then
                                                             (label
                                                              new-label
                                                              -1)
                                                             (branch
                                                              (with-tccs
                                                               (inst
                                                                new-label
                                                                "e_Y"
                                                                "e_Y"
                                                                "r_Y"
                                                                "r_Y"
                                                                "Y"
                                                                "Y"))
                                                              ((branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (aerr-assert)
                                                                  (fail))
                                                                 (propax)
                                                                 (propax)
                                                                 (assert-condition)))
                                                               (assert-condition))))))
                                                          (assert-condition)))
                                                        (assert-condition))))))
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (FtoR const-decl "real" float "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (sqroot const-decl "unb_double" sqroot nil))
   shostak)))

