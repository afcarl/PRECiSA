(cert_predPrey
 (predatorPrey_0_TCC1 0
  (predatorPrey_0_TCC1-1 nil 3706901664 ("" (precisa-gen-cert-tcc) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (int_minus_int_is_int application-judgement "int" integers nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (div_times formula-decl nil real_props nil)
    (div_div1 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_plus_real_is_real application-judgement "real" reals nil))
   nil))
 (predatorPrey_0 0
  (predatorPrey_0-1 nil 3706901903
   (""
    (then (skeep) (expand "predatorPrey" :assert? none) (try-simp-ite)
     (then (lemma "Ddiv_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_mul_p2(2, aebounddp_mul(r_X, e_X, r_X, e_X))"
            "aebounddp_add(1, 0, ((r_X / (111 / 100)) * (r_X / (111 / 100))), aebounddp_mul((r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)), (r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))))"
            "(4 * (r_X * r_X))"
            "(1 + ((r_X / (111 / 100)) * (r_X / (111 / 100))))"
            "Dmul(RtoD(4), Dmul(X, X))"
            "Dadd(RtoD(1), Dmul(Ddiv(X, RtoD((111 / 100))), Ddiv(X, RtoD((111 / 100)))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Dmulpow2l_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "aebounddp_mul(r_X, e_X, r_X, e_X)"
                    "(r_X * r_X)" "Dmul(X, X)" "2"))
                  ((branch (split -1)
                    ((try
                      (branch (case "2^2=4")
                       ((assert) (eval-formulas + :quiet? t)))
                      (skip) (then (aerr-assert) (fail)))
                     (then (lemma "Dmul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_X" "e_X" "r_X" "r_X" "X"
                            "X"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (propax) (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Dadd_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "0"
                    "aebounddp_mul((r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)), (r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)))"
                    "1" "((r_X / (111 / 100)) * (r_X / (111 / 100)))"
                    "RtoD(1)"
                    "Dmul(Ddiv(X, RtoD((111 / 100))), Ddiv(X, RtoD((111 / 100))))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t)
                     (then (lemma "Dmul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))"
                            "aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))"
                            "(r_X / (111 / 100))" "(r_X / (111 / 100))"
                            "Ddiv(X, RtoD((111 / 100)))"
                            "Ddiv(X, RtoD((111 / 100)))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Ddiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_X"
                                    "(11 / 112589990684262400)"
                                    "r_X"
                                    "(111 / 100)"
                                    "X"
                                    "RtoD((111 / 100))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (eval-formulas + :quiet? t)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Ddiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_X"
                                    "(11 / 112589990684262400)"
                                    "r_X"
                                    "(111 / 100)"
                                    "X"
                                    "RtoD((111 / 100))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (eval-formulas + :quiet? t)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Ddiv_aerr formula-decl nil aerr754dp_div "float/")
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div "float/")
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div "float/")
    (e_X skolem-const-decl "nonneg_real" cert_predPrey nil)
    (r_X skolem-const-decl "real" cert_predPrey nil)
    (^ const-decl "real" exponentiation nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (Dmulpow2l_aerr formula-decl nil aerr754dp_mul "float/")
    (rat_minus_rat_is_rat application-judgement "rat" rationals nil)
    (posrat_plus_nnrat_is_posrat application-judgement "posrat"
     rationals nil)
    (below type-eq-decl nil naturalnumbers nil)
    (X skolem-const-decl "unb_double" cert_predPrey nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (pos_div_gt formula-decl nil real_props nil)
    (div_div1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (pos_times_ge formula-decl nil real_props nil)
    (div_mult_pos_lt1 formula-decl nil real_props nil)
    (predatorPrey const-decl "unb_double" predPrey nil))
   shostak)))

