(cert_sine
 (sine_0 0
  (sine_0-1 nil 3699198048
   (""
    (then (skeep) (expand "sine" :assert? none) (try-simp-ite)
     (then (lemma "Dsub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label "e_X"
            "aebounddp_add(((r_X * (r_X * r_X)) / 6), aebounddp_div((r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)), 6, 0), (((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)), aebounddp_sub(((r_X * (r_X * (r_X * (r_X * r_X)))) / 120), aebounddp_div((r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))), 120, 0), ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040), aebounddp_div((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))), 5040, 0)))"
            "r_X"
            "(((r_X * (r_X * r_X)) / 6) + (((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)))"
            "X"
            "Dadd(Ddiv(Dmul(X, Dmul(X, X)), RtoD(6)), Dsub(Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))), RtoD(120)), Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))), RtoD(5040))))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail)) (propax)
             (then (lemma "Dadd_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_div((r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)), 6, 0)"
                    "aebounddp_sub(((r_X * (r_X * (r_X * (r_X * r_X)))) / 120), aebounddp_div((r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))), 120, 0), ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040), aebounddp_div((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))), 5040, 0))"
                    "((r_X * (r_X * r_X)) / 6)"
                    "(((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040))"
                    "Ddiv(Dmul(X, Dmul(X, X)), RtoD(6))"
                    "Dsub(Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))), RtoD(120)), Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))), RtoD(5040)))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Ddiv_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))"
                            "0" "(r_X * (r_X * r_X))" "6"
                            "Dmul(X, Dmul(X, X))" "RtoD(6)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_X"
                                    "aebounddp_mul(r_X, e_X, r_X, e_X)"
                                    "r_X"
                                    "(r_X * r_X)"
                                    "X"
                                    "Dmul(X, X)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X"
                                           "e_X"
                                           "r_X"
                                           "r_X"
                                           "X"
                                           "X"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Dsub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_div((r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))), 120, 0)"
                            "aebounddp_div((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))), 5040, 0)"
                            "((r_X * (r_X * (r_X * (r_X * r_X)))) / 120)"
                            "((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)"
                            "Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))), RtoD(120))"
                            "Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))), RtoD(5040))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Ddiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))))"
                                    "0"
                                    "(r_X * (r_X * (r_X * (r_X * r_X))))"
                                    "120"
                                    "Dmul(X, Dmul(X, Dmul(X, Dmul(X, X))))"
                                    "RtoD(120)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X"
                                           "aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))"
                                           "r_X"
                                           "(r_X * (r_X * (r_X * r_X)))"
                                           "X"
                                           "Dmul(X, Dmul(X, Dmul(X, X)))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (then
                                             (lemma "Dmul_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "e_X"
                                                  "aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))"
                                                  "r_X"
                                                  "(r_X * (r_X * r_X))"
                                                  "X"
                                                  "Dmul(X, Dmul(X, X))"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (propax)
                                                   (then
                                                    (lemma "Dmul_aerr")
                                                    (let
                                                     ((new-label
                                                       (freshname
                                                        "l")))
                                                     (then
                                                      (label
                                                       new-label
                                                       -1)
                                                      (branch
                                                       (with-tccs
                                                        (inst
                                                         new-label
                                                         "e_X"
                                                         "aebounddp_mul(r_X, e_X, r_X, e_X)"
                                                         "r_X"
                                                         "(r_X * r_X)"
                                                         "X"
                                                         "Dmul(X, X)"))
                                                       ((branch
                                                         (split -1)
                                                         ((then
                                                           (aerr-assert)
                                                           (fail))
                                                          (propax)
                                                          (then
                                                           (lemma
                                                            "Dmul_aerr")
                                                           (let
                                                            ((new-label
                                                              (freshname
                                                               "l")))
                                                            (then
                                                             (label
                                                              new-label
                                                              -1)
                                                             (branch
                                                              (with-tccs
                                                               (inst
                                                                new-label
                                                                "e_X"
                                                                "e_X"
                                                                "r_X"
                                                                "r_X"
                                                                "X"
                                                                "X"))
                                                              ((branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (aerr-assert)
                                                                  (fail))
                                                                 (propax)
                                                                 (propax)
                                                                 (assert-condition)))
                                                               (assert-condition))))))
                                                          (assert-condition)))
                                                        (assert-condition))))))
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (eval-formulas + :quiet? t)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Ddiv_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))))))"
                                    "0"
                                    "(r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))))"
                                    "5040"
                                    "Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X))))))"
                                    "RtoD(5040)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X"
                                           "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))"
                                           "r_X"
                                           "(r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))"
                                           "X"
                                           "Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (then
                                             (lemma "Dmul_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "e_X"
                                                  "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))))"
                                                  "r_X"
                                                  "(r_X * (r_X * (r_X * (r_X * r_X))))"
                                                  "X"
                                                  "Dmul(X, Dmul(X, Dmul(X, Dmul(X, X))))"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (propax)
                                                   (then
                                                    (lemma "Dmul_aerr")
                                                    (let
                                                     ((new-label
                                                       (freshname
                                                        "l")))
                                                     (then
                                                      (label
                                                       new-label
                                                       -1)
                                                      (branch
                                                       (with-tccs
                                                        (inst
                                                         new-label
                                                         "e_X"
                                                         "aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))"
                                                         "r_X"
                                                         "(r_X * (r_X * (r_X * r_X)))"
                                                         "X"
                                                         "Dmul(X, Dmul(X, Dmul(X, X)))"))
                                                       ((branch
                                                         (split -1)
                                                         ((then
                                                           (aerr-assert)
                                                           (fail))
                                                          (propax)
                                                          (then
                                                           (lemma
                                                            "Dmul_aerr")
                                                           (let
                                                            ((new-label
                                                              (freshname
                                                               "l")))
                                                            (then
                                                             (label
                                                              new-label
                                                              -1)
                                                             (branch
                                                              (with-tccs
                                                               (inst
                                                                new-label
                                                                "e_X"
                                                                "aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))"
                                                                "r_X"
                                                                "(r_X * (r_X * r_X))"
                                                                "X"
                                                                "Dmul(X, Dmul(X, X))"))
                                                              ((branch
                                                                (split
                                                                 -1)
                                                                ((then
                                                                  (aerr-assert)
                                                                  (fail))
                                                                 (propax)
                                                                 (then
                                                                  (lemma
                                                                   "Dmul_aerr")
                                                                  (let
                                                                   ((new-label
                                                                     (freshname
                                                                      "l")))
                                                                   (then
                                                                    (label
                                                                     new-label
                                                                     -1)
                                                                    (branch
                                                                     (with-tccs
                                                                      (inst
                                                                       new-label
                                                                       "e_X"
                                                                       "aebounddp_mul(r_X, e_X, r_X, e_X)"
                                                                       "r_X"
                                                                       "(r_X * r_X)"
                                                                       "X"
                                                                       "Dmul(X, X)"))
                                                                     ((branch
                                                                       (split
                                                                        -1)
                                                                       ((then
                                                                         (aerr-assert)
                                                                         (fail))
                                                                        (propax)
                                                                        (then
                                                                         (lemma
                                                                          "Dmul_aerr")
                                                                         (let
                                                                          ((new-label
                                                                            (freshname
                                                                             "l")))
                                                                          (then
                                                                           (label
                                                                            new-label
                                                                            -1)
                                                                           (branch
                                                                            (with-tccs
                                                                             (inst
                                                                              new-label
                                                                              "e_X"
                                                                              "e_X"
                                                                              "r_X"
                                                                              "r_X"
                                                                              "X"
                                                                              "X"))
                                                                            ((branch
                                                                              (split
                                                                               -1)
                                                                              ((then
                                                                                (aerr-assert)
                                                                                (fail))
                                                                               (propax)
                                                                               (propax)
                                                                               (assert-condition)))
                                                                             (assert-condition))))))
                                                                        (assert-condition)))
                                                                      (assert-condition))))))
                                                                 (assert-condition)))
                                                               (assert-condition))))))
                                                          (assert-condition)))
                                                        (assert-condition))))))
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (eval-formulas + :quiet? t)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (even_plus_even_is_even application-judgement "even_int" integers
     nil)
    (even_minus_even_is_even application-judgement "even_int" integers
     nil)
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div "float/")
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (Ddiv_aerr formula-decl nil aerr754dp_div "float/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (sine const-decl "unb_double" sine nil))
   shostak)))

