(cert_doppler3
 (dop1_0_TCC1 0
  (dop1_0_TCC1-1 nil 3706901668 ("" (precisa-gen-cert-tcc) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (dop1_0_TCC2 0
  (dop1_0_TCC2-1 nil 3706901668 ("" (precisa-gen-cert-tcc) nil)
   ((times_div1 formula-decl nil real_props nil)
    (div_times formula-decl nil real_props nil)
    (add_div formula-decl nil real_props nil)
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (div_distributes formula-decl nil real_props nil)
    (times_div2 formula-decl nil real_props nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil))
   nil))
 (dop1_0 0
  (dop1_0-1 nil 3706901903
   (""
    (then (skeep) (expand "dop1" :assert? none) (try-simp-ite)
     (then (lemma "Ddiv_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_mul(-(((1657 / 5) + ((3 / 5) * r_T))), aebounddp_neg(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))), r_V, e_V)"
            "aebounddp_mul((((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U), (((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U))"
            "(-(((1657 / 5) + ((3 / 5) * r_T))) * r_V)"
            "((((1657 / 5) + ((3 / 5) * r_T)) + r_U) * (((1657 / 5) + ((3 / 5) * r_T)) + r_U))"
            "Dmul(Dneg(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))), V)"
            "Dmul(Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U), Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Dmul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_neg(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)))"
                    "e_V" "-(((1657 / 5) + ((3 / 5) * r_T)))" "r_V"
                    "Dneg(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)))"
                    "V"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Dneg_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))"
                            "((1657 / 5) + ((3 / 5) * r_T))"
                            "Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dadd_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "(1 / 43980465111040)"
                                    "aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)"
                                    "(1657 / 5)"
                                    "((3 / 5) * r_T)"
                                    "RtoD((1657 / 5))"
                                    "Dmul(RtoD((3 / 5)), T)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "(1 / 45035996273704960)"
                                           "e_T"
                                           "(3 / 5)"
                                           "r_T"
                                           "RtoD((3 / 5))"
                                           "T"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (propax) (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Dmul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U)"
                    "aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U)"
                    "(((1657 / 5) + ((3 / 5) * r_T)) + r_U)"
                    "(((1657 / 5) + ((3 / 5) * r_T)) + r_U)"
                    "Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U)"
                    "Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U)"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Dadd_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))"
                            "e_U" "((1657 / 5) + ((3 / 5) * r_T))"
                            "r_U"
                            "Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))"
                            "U"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dadd_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "(1 / 43980465111040)"
                                    "aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)"
                                    "(1657 / 5)"
                                    "((3 / 5) * r_T)"
                                    "RtoD((1657 / 5))"
                                    "Dmul(RtoD((3 / 5)), T)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "(1 / 45035996273704960)"
                                           "e_T"
                                           "(3 / 5)"
                                           "r_T"
                                           "RtoD((3 / 5))"
                                           "T"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (propax) (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Dadd_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))"
                            "e_U" "((1657 / 5) + ((3 / 5) * r_T))"
                            "r_U"
                            "Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))"
                            "U"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dadd_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "(1 / 43980465111040)"
                                    "aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)"
                                    "(1657 / 5)"
                                    "((3 / 5) * r_T)"
                                    "RtoD((1657 / 5))"
                                    "Dmul(RtoD((3 / 5)), T)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "(1 / 45035996273704960)"
                                           "e_T"
                                           "(3 / 5)"
                                           "r_T"
                                           "RtoD((3 / 5))"
                                           "T"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (eval-formulas + :quiet? t)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (propax) (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (> const-decl "bool" reals nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (Dneg const-decl
     "{f: unb_double | closest_double?(-(DtoR(f1)))(f)}" ieee754dp_neg
     "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (/= const-decl "boolean" notequal nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (Ddiv_aerr formula-decl nil aerr754dp_div "float/")
    (dop1 const-decl "unb_double" doppler3 nil))
   shostak)))

