% This file is automatically generated by PRECiSA 
% 2017-06-19 20:59:29.666606 UTC

cert_doppler1: THEORY
BEGIN
IMPORTING PRECiSA@strategies, doppler1

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

dop1_0 : LEMMA
FORALL(e_U, e_V, e_T: nonneg_real, r_U, r_V, r_T: real, U, V, T: unb_double):
abs(DtoR(U) - r_U)<=e_U AND abs(DtoR(V) - r_V)<=e_V AND abs(DtoR(T) - r_T)<=e_T
AND (((((((1657 / 5) + ((3 / 5) * r_T)) + r_U) * (((1657 / 5) + ((3 / 5) * r_T)) + r_U)) /= 0) AND (DtoR(Dmul(Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U), Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U))) /= 0)) AND (((((((1657 / 5) + ((3 / 5) * r_T)) + r_U) * (((1657 / 5) + ((3 / 5) * r_T)) + r_U)) + aebounddp_mul((((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U), (((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U))) < 0) OR ((((((1657 / 5) + ((3 / 5) * r_T)) + r_U) * (((1657 / 5) + ((3 / 5) * r_T)) + r_U)) - aebounddp_mul((((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U), (((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U))) > 0)))
AND TRUE
IMPLIES
abs(DtoR(dop1(U, V, T)) - ((-(((1657 / 5) + ((3 / 5) * r_T))) * r_V) / ((((1657 / 5) + ((3 / 5) * r_T)) + r_U) * (((1657 / 5) + ((3 / 5) * r_T)) + r_U))))<=aebounddp_div((-(((1657 / 5) + ((3 / 5) * r_T))) * r_V), aebounddp_mul(-(((1657 / 5) + ((3 / 5) * r_T))), aebounddp_neg(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))), r_V, e_V), ((((1657 / 5) + ((3 / 5) * r_T)) + r_U) * (((1657 / 5) + ((3 / 5) * r_T)) + r_U)), aebounddp_mul((((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U), (((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U)))

%|- dop1_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "dop1" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(-(((1657 / 5) + ((3 / 5) * r_T))), aebounddp_neg(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))), r_V, e_V)"
%|-    "aebounddp_mul((((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U), (((1657 / 5) + ((3 / 5) * r_T)) + r_U), aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U))"
%|-    "(-(((1657 / 5) + ((3 / 5) * r_T))) * r_V)"
%|-    "((((1657 / 5) + ((3 / 5) * r_T)) + r_U) * (((1657 / 5) + ((3 / 5) * r_T)) + r_U))"
%|-    "Dmul(Dneg(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))), V)"
%|-    "Dmul(Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U), Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_neg(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)))"
%|-    "e_V"
%|-    "-(((1657 / 5) + ((3 / 5) * r_T)))"
%|-    "r_V"
%|-    "Dneg(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)))"
%|-    "V"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dneg_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))"
%|-    "((1657 / 5) + ((3 / 5) * r_T))"
%|-    "Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(1 / 43980465111040)"
%|-    "aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)"
%|-    "(1657 / 5)"
%|-    "((3 / 5) * r_T)"
%|-    "RtoD((1657 / 5))"
%|-    "Dmul(RtoD((3 / 5)), T)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(1 / 45035996273704960)"
%|-    "e_T"
%|-    "(3 / 5)"
%|-    "r_T"
%|-    "RtoD((3 / 5))"
%|-    "T"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U)"
%|-    "aebounddp_add(((1657 / 5) + ((3 / 5) * r_T)), aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)), r_U, e_U)"
%|-    "(((1657 / 5) + ((3 / 5) * r_T)) + r_U)"
%|-    "(((1657 / 5) + ((3 / 5) * r_T)) + r_U)"
%|-    "Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U)"
%|-    "Dadd(Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T)), U)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))"
%|-    "e_U"
%|-    "((1657 / 5) + ((3 / 5) * r_T))"
%|-    "r_U"
%|-    "Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))"
%|-    "U"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(1 / 43980465111040)"
%|-    "aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)"
%|-    "(1657 / 5)"
%|-    "((3 / 5) * r_T)"
%|-    "RtoD((1657 / 5))"
%|-    "Dmul(RtoD((3 / 5)), T)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(1 / 45035996273704960)"
%|-    "e_T"
%|-    "(3 / 5)"
%|-    "r_T"
%|-    "RtoD((3 / 5))"
%|-    "T"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((1657 / 5), (1 / 43980465111040), ((3 / 5) * r_T), aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T))"
%|-    "e_U"
%|-    "((1657 / 5) + ((3 / 5) * r_T))"
%|-    "r_U"
%|-    "Dadd(RtoD((1657 / 5)), Dmul(RtoD((3 / 5)), T))"
%|-    "U"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(1 / 43980465111040)"
%|-    "aebounddp_mul((3 / 5), (1 / 45035996273704960), r_T, e_T)"
%|-    "(1657 / 5)"
%|-    "((3 / 5) * r_T)"
%|-    "RtoD((1657 / 5))"
%|-    "Dmul(RtoD((3 / 5)), T)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(1 / 45035996273704960)"
%|-    "e_T"
%|-    "(3 / 5)"
%|-    "r_T"
%|-    "RtoD((3 / 5))"
%|-    "T"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_doppler1