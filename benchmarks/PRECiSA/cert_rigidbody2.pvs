% This file is automatically generated by PRECiSA 
% 2017-06-19 20:58:59.154196 UTC

cert_rigidbody2: THEORY
BEGIN
IMPORTING PRECiSA@strategies, rigidbody2

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

rigidBody2_0 : LEMMA
FORALL(e_X1, e_X2, e_X3: nonneg_real, r_X1, r_X2, r_X3: real, X1, X2, X3: unb_double):
abs(DtoR(X1) - r_X1)<=e_X1 AND abs(DtoR(X2) - r_X2)<=e_X2 AND abs(DtoR(X3) - r_X3)<=e_X3
AND (1 < (ieee754dp_prec - Fexp(Dmul(X1, Dmul(X2, X3)))))
AND TRUE
IMPLIES
abs(DtoR(rigidBody2(X1, X2, X3)) - (((((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))) - (r_X2 * (r_X1 * (r_X2 * r_X3)))) + (3 * (r_X3 * r_X3))) - r_X2))<=aebounddp_sub(((((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))) - (r_X2 * (r_X1 * (r_X2 * r_X3)))) + (3 * (r_X3 * r_X3))), aebounddp_add((((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))) - (r_X2 * (r_X1 * (r_X2 * r_X3)))), aebounddp_sub(((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))), aebounddp_add((2 * (r_X1 * (r_X2 * r_X3))), aebounddp_mul_p2(1, aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))), (3 * (r_X3 * r_X3)), aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3))), (r_X2 * (r_X1 * (r_X2 * r_X3))), aebounddp_mul(r_X2, e_X2, (r_X1 * (r_X2 * r_X3)), aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3)))), (3 * (r_X3 * r_X3)), aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3))), r_X2, e_X2)

%|- rigidBody2_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "rigidBody2" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))) - (r_X2 * (r_X1 * (r_X2 * r_X3)))), aebounddp_sub(((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))), aebounddp_add((2 * (r_X1 * (r_X2 * r_X3))), aebounddp_mul_p2(1, aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))), (3 * (r_X3 * r_X3)), aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3))), (r_X2 * (r_X1 * (r_X2 * r_X3))), aebounddp_mul(r_X2, e_X2, (r_X1 * (r_X2 * r_X3)), aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3)))), (3 * (r_X3 * r_X3)), aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3)))"
%|-    "e_X2"
%|-    "((((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))) - (r_X2 * (r_X1 * (r_X2 * r_X3)))) + (3 * (r_X3 * r_X3)))"
%|-    "r_X2"
%|-    "Dadd(Dsub(Dadd(Dmul(RtoD(2), Dmul(X1, Dmul(X2, X3))), Dmul(RtoD(3), Dmul(X3, X3))), Dmul(X2, Dmul(X1, Dmul(X2, X3)))), Dmul(RtoD(3), Dmul(X3, X3)))"
%|-    "X2"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_sub(((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))), aebounddp_add((2 * (r_X1 * (r_X2 * r_X3))), aebounddp_mul_p2(1, aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))), (3 * (r_X3 * r_X3)), aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3))), (r_X2 * (r_X1 * (r_X2 * r_X3))), aebounddp_mul(r_X2, e_X2, (r_X1 * (r_X2 * r_X3)), aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))))"
%|-    "aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3))"
%|-    "(((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3))) - (r_X2 * (r_X1 * (r_X2 * r_X3))))"
%|-    "(3 * (r_X3 * r_X3))"
%|-    "Dsub(Dadd(Dmul(RtoD(2), Dmul(X1, Dmul(X2, X3))), Dmul(RtoD(3), Dmul(X3, X3))), Dmul(X2, Dmul(X1, Dmul(X2, X3))))"
%|-    "Dmul(RtoD(3), Dmul(X3, X3))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add((2 * (r_X1 * (r_X2 * r_X3))), aebounddp_mul_p2(1, aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))), (3 * (r_X3 * r_X3)), aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3)))"
%|-    "aebounddp_mul(r_X2, e_X2, (r_X1 * (r_X2 * r_X3)), aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3)))"
%|-    "((2 * (r_X1 * (r_X2 * r_X3))) + (3 * (r_X3 * r_X3)))"
%|-    "(r_X2 * (r_X1 * (r_X2 * r_X3)))"
%|-    "Dadd(Dmul(RtoD(2), Dmul(X1, Dmul(X2, X3))), Dmul(RtoD(3), Dmul(X3, X3)))"
%|-    "Dmul(X2, Dmul(X1, Dmul(X2, X3)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul_p2(1, aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3)))"
%|-    "aebounddp_mul(3, 0, (r_X3 * r_X3), aebounddp_mul(r_X3, e_X3, r_X3, e_X3))"
%|-    "(2 * (r_X1 * (r_X2 * r_X3)))"
%|-    "(3 * (r_X3 * r_X3))"
%|-    "Dmul(RtoD(2), Dmul(X1, Dmul(X2, X3)))"
%|-    "Dmul(RtoD(3), Dmul(X3, X3))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmulpow2l_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))"
%|-    "(r_X1 * (r_X2 * r_X3))"
%|-    "Dmul(X1, Dmul(X2, X3))"
%|-    "1"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (try (branch (case "2^1=2") ((assert) (eval-formulas + :quiet? t))) (skip) (then (aerr-assert) (fail)))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X1"
%|-    "aebounddp_mul(r_X2, e_X2, r_X3, e_X3)"
%|-    "r_X1"
%|-    "(r_X2 * r_X3)"
%|-    "X1"
%|-    "Dmul(X2, X3)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X2"
%|-    "e_X3"
%|-    "r_X2"
%|-    "r_X3"
%|-    "X2"
%|-    "X3"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_mul(r_X3, e_X3, r_X3, e_X3)"
%|-    "3"
%|-    "(r_X3 * r_X3)"
%|-    "RtoD(3)"
%|-    "Dmul(X3, X3)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X3"
%|-    "e_X3"
%|-    "r_X3"
%|-    "r_X3"
%|-    "X3"
%|-    "X3"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X2"
%|-    "aebounddp_mul(r_X1, e_X1, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))"
%|-    "r_X2"
%|-    "(r_X1 * (r_X2 * r_X3))"
%|-    "X2"
%|-    "Dmul(X1, Dmul(X2, X3))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X1"
%|-    "aebounddp_mul(r_X2, e_X2, r_X3, e_X3)"
%|-    "r_X1"
%|-    "(r_X2 * r_X3)"
%|-    "X1"
%|-    "Dmul(X2, X3)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X2"
%|-    "e_X3"
%|-    "r_X2"
%|-    "r_X3"
%|-    "X2"
%|-    "X3"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_mul(r_X3, e_X3, r_X3, e_X3)"
%|-    "3"
%|-    "(r_X3 * r_X3)"
%|-    "RtoD(3)"
%|-    "Dmul(X3, X3)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X3"
%|-    "e_X3"
%|-    "r_X3"
%|-    "r_X3"
%|-    "X3"
%|-    "X3"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_rigidbody2