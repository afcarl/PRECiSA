% This file is automatically generated by PRECiSA 
% 2017-06-19 21:01:52.305751 UTC

cert_sqroot: THEORY
BEGIN
IMPORTING PRECiSA@strategies, sqroot

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

sqroot_0 : LEMMA
FORALL(e_Y: nonneg_real, r_Y: real, Y: unb_double):
abs(DtoR(Y) - r_Y)<=e_Y
AND TRUE
AND TRUE
IMPLIES
abs(DtoR(sqroot(Y)) - (1 + (((1 / 2) * r_Y) - (((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))))))<=aebounddp_add(1, 0, (((1 / 2) * r_Y) - (((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))))), aebounddp_sub(((1 / 2) * r_Y), aebounddp_mul((1 / 2), (0 / 1), r_Y, e_Y), (((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))), aebounddp_add(((1 / 8) * (r_Y * r_Y)), aebounddp_mul((1 / 8), (0 / 1), (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)), (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))), aebounddp_sub(((1 / 16) * (r_Y * (r_Y * r_Y))), aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))), ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))), aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))))))))

%|- sqroot_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "sqroot" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_sub(((1 / 2) * r_Y), aebounddp_mul((1 / 2), (0 / 1), r_Y, e_Y), (((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))), aebounddp_add(((1 / 8) * (r_Y * r_Y)), aebounddp_mul((1 / 8), (0 / 1), (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)), (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))), aebounddp_sub(((1 / 16) * (r_Y * (r_Y * r_Y))), aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))), ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))), aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))))))"
%|-    "1"
%|-    "(((1 / 2) * r_Y) - (((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))))"
%|-    "RtoD(1)"
%|-    "Dsub(Dmul(RtoD((1 / 2)), Y), Dadd(Dmul(RtoD((1 / 8)), Dmul(Y, Y)), Dsub(Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y))), Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y)))))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul((1 / 2), (0 / 1), r_Y, e_Y)"
%|-    "aebounddp_add(((1 / 8) * (r_Y * r_Y)), aebounddp_mul((1 / 8), (0 / 1), (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)), (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))), aebounddp_sub(((1 / 16) * (r_Y * (r_Y * r_Y))), aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))), ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))), aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))))))"
%|-    "((1 / 2) * r_Y)"
%|-    "(((1 / 8) * (r_Y * r_Y)) + (((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))))"
%|-    "Dmul(RtoD((1 / 2)), Y)"
%|-    "Dadd(Dmul(RtoD((1 / 8)), Dmul(Y, Y)), Dsub(Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y))), Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y))))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(0 / 1)"
%|-    "e_Y"
%|-    "(1 / 2)"
%|-    "r_Y"
%|-    "RtoD((1 / 2))"
%|-    "Y"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul((1 / 8), (0 / 1), (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))"
%|-    "aebounddp_sub(((1 / 16) * (r_Y * (r_Y * r_Y))), aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))), ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))), aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))))"
%|-    "((1 / 8) * (r_Y * r_Y))"
%|-    "(((1 / 16) * (r_Y * (r_Y * r_Y))) - ((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y)))))"
%|-    "Dmul(RtoD((1 / 8)), Dmul(Y, Y))"
%|-    "Dsub(Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y))), Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y)))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(0 / 1)"
%|-    "aebounddp_mul(r_Y, e_Y, r_Y, e_Y)"
%|-    "(1 / 8)"
%|-    "(r_Y * r_Y)"
%|-    "RtoD((1 / 8))"
%|-    "Dmul(Y, Y)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Y"
%|-    "e_Y"
%|-    "r_Y"
%|-    "r_Y"
%|-    "Y"
%|-    "Y"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul((1 / 16), (0 / 1), (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))"
%|-    "aebounddp_mul((5 / 128), (0 / 1), (r_Y * (r_Y * (r_Y * r_Y))), aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))))"
%|-    "((1 / 16) * (r_Y * (r_Y * r_Y)))"
%|-    "((5 / 128) * (r_Y * (r_Y * (r_Y * r_Y))))"
%|-    "Dmul(RtoD((1 / 16)), Dmul(Y, Dmul(Y, Y)))"
%|-    "Dmul(RtoD((5 / 128)), Dmul(Y, Dmul(Y, Dmul(Y, Y))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(0 / 1)"
%|-    "aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))"
%|-    "(1 / 16)"
%|-    "(r_Y * (r_Y * r_Y))"
%|-    "RtoD((1 / 16))"
%|-    "Dmul(Y, Dmul(Y, Y))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Y"
%|-    "aebounddp_mul(r_Y, e_Y, r_Y, e_Y)"
%|-    "r_Y"
%|-    "(r_Y * r_Y)"
%|-    "Y"
%|-    "Dmul(Y, Y)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Y"
%|-    "e_Y"
%|-    "r_Y"
%|-    "r_Y"
%|-    "Y"
%|-    "Y"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(0 / 1)"
%|-    "aebounddp_mul(r_Y, e_Y, (r_Y * (r_Y * r_Y)), aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y)))"
%|-    "(5 / 128)"
%|-    "(r_Y * (r_Y * (r_Y * r_Y)))"
%|-    "RtoD((5 / 128))"
%|-    "Dmul(Y, Dmul(Y, Dmul(Y, Y)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Y"
%|-    "aebounddp_mul(r_Y, e_Y, (r_Y * r_Y), aebounddp_mul(r_Y, e_Y, r_Y, e_Y))"
%|-    "r_Y"
%|-    "(r_Y * (r_Y * r_Y))"
%|-    "Y"
%|-    "Dmul(Y, Dmul(Y, Y))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Y"
%|-    "aebounddp_mul(r_Y, e_Y, r_Y, e_Y)"
%|-    "r_Y"
%|-    "(r_Y * r_Y)"
%|-    "Y"
%|-    "Dmul(Y, Y)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_Y"
%|-    "e_Y"
%|-    "r_Y"
%|-    "r_Y"
%|-    "Y"
%|-    "Y"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_sqroot