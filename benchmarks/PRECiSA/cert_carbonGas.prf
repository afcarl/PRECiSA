(cert_carbonGas
 (carbonGas_0_TCC1 0
  (carbonGas_0_TCC1-1 nil 3706900895 ("" (precisa-gen-cert-tcc) nil)
   ((real_minus_real_is_real application-judgement "real" reals nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil))
   nil))
 (carbonGas_0 0
  (carbonGas_0-1 nil 3706900907
   (""
    (then (skeep) (expand "carbonGas" :assert? none) (try-simp-ite)
     (then (lemma "Dsub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_mul((35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))), aebounddp_add(35000000, 0, ((401 / 1000) * ((1000 / r_V) * (1000 / r_V))), aebounddp_mul((401 / 1000), (13 / 562949953421312000), ((1000 / r_V) * (1000 / r_V)), aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V)))), (r_V - (1000 * (427 / 10000000))), aebounddp_sub(r_V, e_V, (1000 * (427 / 10000000)), aebounddp_mul(1000, 0, (427 / 10000000), (13123 / 11529215046068469760000000))))"
            "aebounddp_mul((13806503 / 1000000000000000000000000000000), (158966299189426689359 / 158456325028528675187087900672000000000000000000000000000000), (1000 * 300), aebounddp_mul(1000, 0, 300, 0))"
            "((35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))) * (r_V - (1000 * (427 / 10000000))))"
            "((13806503 / 1000000000000000000000000000000) * (1000 * 300))"
            "Dmul(Dadd(RtoD(35000000), Dmul(RtoD((401 / 1000)), Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V)))), Dsub(V, Dmul(RtoD(1000), RtoD((427 / 10000000)))))"
            "Dmul(RtoD((13806503 / 1000000000000000000000000000000)), Dmul(RtoD(1000), RtoD(300)))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Dmul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_add(35000000, 0, ((401 / 1000) * ((1000 / r_V) * (1000 / r_V))), aebounddp_mul((401 / 1000), (13 / 562949953421312000), ((1000 / r_V) * (1000 / r_V)), aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V))))"
                    "aebounddp_sub(r_V, e_V, (1000 * (427 / 10000000)), aebounddp_mul(1000, 0, (427 / 10000000), (13123 / 11529215046068469760000000)))"
                    "(35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V))))"
                    "(r_V - (1000 * (427 / 10000000)))"
                    "Dadd(RtoD(35000000), Dmul(RtoD((401 / 1000)), Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V))))"
                    "Dsub(V, Dmul(RtoD(1000), RtoD((427 / 10000000))))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Dadd_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "0"
                            "aebounddp_mul((401 / 1000), (13 / 562949953421312000), ((1000 / r_V) * (1000 / r_V)), aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V)))"
                            "35000000"
                            "((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))"
                            "RtoD(35000000)"
                            "Dmul(RtoD((401 / 1000)), Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V)))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t)
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "(13 / 562949953421312000)"
                                    "aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V))"
                                    "(401 / 1000)"
                                    "((1000 / r_V) * (1000 / r_V))"
                                    "RtoD((401 / 1000))"
                                    "Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "aebounddp_div(1000, 0, r_V, e_V)"
                                           "aebounddp_div(1000, 0, r_V, e_V)"
                                           "(1000 / r_V)"
                                           "(1000 / r_V)"
                                           "Ddiv(RtoD(1000), V)"
                                           "Ddiv(RtoD(1000), V)"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (then
                                             (lemma "Ddiv_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "0"
                                                  "e_V"
                                                  "1000"
                                                  "r_V"
                                                  "RtoD(1000)"
                                                  "V"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (propax)
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (then
                                             (lemma "Ddiv_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "0"
                                                  "e_V"
                                                  "1000"
                                                  "r_V"
                                                  "RtoD(1000)"
                                                  "V"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (eval-formulas
                                                    +
                                                    :quiet?
                                                    t)
                                                   (propax)
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Dsub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_V"
                            "aebounddp_mul(1000, 0, (427 / 10000000), (13123 / 11529215046068469760000000))"
                            "r_V" "(1000 * (427 / 10000000))" "V"
                            "Dmul(RtoD(1000), RtoD((427 / 10000000)))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "0"
                                    "(13123 / 11529215046068469760000000)"
                                    "1000"
                                    "(427 / 10000000)"
                                    "RtoD(1000)"
                                    "RtoD((427 / 10000000))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (eval-formulas + :quiet? t)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Dmul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "(158966299189426689359 / 158456325028528675187087900672000000000000000000000000000000)"
                    "aebounddp_mul(1000, 0, 300, 0)"
                    "(13806503 / 1000000000000000000000000000000)"
                    "(1000 * 300)"
                    "RtoD((13806503 / 1000000000000000000000000000000))"
                    "Dmul(RtoD(1000), RtoD(300))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t)
                     (then (lemma "Dmul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "0" "0" "1000" "300"
                            "RtoD(1000)" "RtoD(300)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t)
                             (eval-formulas + :quiet? t)
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (nzreal_times_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (nzreal_div_nzreal_is_nzreal application-judgement "nzreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (<= const-decl "bool" reals nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (Ddiv_aerr formula-decl nil aerr754dp_div "float/")
    (Dadd_aerr formula-decl nil aerr754dp_add "float/")
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div "float/")
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posrat_times_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (posint_times_posint_is_posint application-judgement "posint"
     integers nil)
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (< const-decl "bool" reals nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (carbonGas const-decl "unb_double" carbonGas nil))
   shostak)))

