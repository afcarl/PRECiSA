(cert_rigidbody1
 (rigidBody1_0 0
  (rigidBody1_0-1 nil 3699198047
   (""
    (then (skeep) (expand "rigidBody1" :assert? none) (try-simp-ite)
     (then (lemma "Dsub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_sub(((-(r_X1) * r_X2) - (2 * (r_X2 * r_X3))), aebounddp_sub((-(r_X1) * r_X2), aebounddp_mul(-(r_X1), aebounddp_neg(r_X1, e_X1), r_X2, e_X2), (2 * (r_X2 * r_X3)), aebounddp_mul_p2(1, aebounddp_mul(r_X2, e_X2, r_X3, e_X3))), r_X1, e_X1)"
            "e_X3" "(((-(r_X1) * r_X2) - (2 * (r_X2 * r_X3))) - r_X1)"
            "r_X3"
            "Dsub(Dsub(Dmul(Dneg(X1), X2), Dmul(RtoD(2), Dmul(X2, X3))), X1)"
            "X3"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Dsub_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_sub((-(r_X1) * r_X2), aebounddp_mul(-(r_X1), aebounddp_neg(r_X1, e_X1), r_X2, e_X2), (2 * (r_X2 * r_X3)), aebounddp_mul_p2(1, aebounddp_mul(r_X2, e_X2, r_X3, e_X3)))"
                    "e_X1" "((-(r_X1) * r_X2) - (2 * (r_X2 * r_X3)))"
                    "r_X1"
                    "Dsub(Dmul(Dneg(X1), X2), Dmul(RtoD(2), Dmul(X2, X3)))"
                    "X1"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Dsub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_mul(-(r_X1), aebounddp_neg(r_X1, e_X1), r_X2, e_X2)"
                            "aebounddp_mul_p2(1, aebounddp_mul(r_X2, e_X2, r_X3, e_X3))"
                            "(-(r_X1) * r_X2)" "(2 * (r_X2 * r_X3))"
                            "Dmul(Dneg(X1), X2)"
                            "Dmul(RtoD(2), Dmul(X2, X3))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebounddp_neg(r_X1, e_X1)"
                                    "e_X2"
                                    "-(r_X1)"
                                    "r_X2"
                                    "Dneg(X1)"
                                    "X2"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Dneg_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X1"
                                           "r_X1"
                                           "X1"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (propax)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Dmulpow2l_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebounddp_mul(r_X2, e_X2, r_X3, e_X3)"
                                    "(r_X2 * r_X3)"
                                    "Dmul(X2, X3)"
                                    "1"))
                                  ((branch
                                    (split -1)
                                    ((try
                                      (branch
                                       (case "2^1=2")
                                       ((assert)
                                        (eval-formulas + :quiet? t)))
                                      (skip)
                                      (then (aerr-assert) (fail)))
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X2"
                                           "e_X3"
                                           "r_X2"
                                           "r_X3"
                                           "X2"
                                           "X3"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (propax) (assert-condition)))
                   (assert-condition))))))
             (propax) (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Dneg const-decl
     "{f: unb_double | closest_double?(-(DtoR(f1)))(f)}" ieee754dp_neg
     "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (^ const-decl "real" exponentiation nil)
    (/= const-decl "boolean" notequal nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (int nonempty-type-eq-decl nil integers nil)
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (nnreal_times_nnreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (expt_x1 formula-decl nil exponentiation nil)
    (e_X3 skolem-const-decl "nonneg_real" cert_rigidbody1 nil)
    (r_X3 skolem-const-decl "real" cert_rigidbody1 nil)
    (e_X2 skolem-const-decl "nonneg_real" cert_rigidbody1 nil)
    (r_X2 skolem-const-decl "real" cert_rigidbody1 nil)
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (Dmulpow2l_aerr formula-decl nil aerr754dp_mul "float/")
    (below type-eq-decl nil naturalnumbers nil)
    (X3 skolem-const-decl "unb_double" cert_rigidbody1 nil)
    (X2 skolem-const-decl "unb_double" cert_rigidbody1 nil)
    (< const-decl "bool" reals nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (rigidBody1 const-decl "unb_double" rigidbody1 nil))
   shostak))
 (rigidBody1_1 0
  (rigidBody1_1-1 nil 3699198047
   (""
    (then (skeep) (expand "rigidBody1" :assert? none) (try-simp-ite)
     (then (lemma "Dsub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_sub(((-(r_X1) * r_X2) - (2 * (r_X2 * r_X3))), aebounddp_sub((-(r_X1) * r_X2), aebounddp_mul(-(r_X1), aebounddp_neg(r_X1, e_X1), r_X2, e_X2), (2 * (r_X2 * r_X3)), aebounddp_mul(2, 0, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))), r_X1, e_X1)"
            "e_X3" "(((-(r_X1) * r_X2) - (2 * (r_X2 * r_X3))) - r_X1)"
            "r_X3"
            "Dsub(Dsub(Dmul(Dneg(X1), X2), Dmul(RtoD(2), Dmul(X2, X3))), X1)"
            "X3"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Dsub_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "aebounddp_sub((-(r_X1) * r_X2), aebounddp_mul(-(r_X1), aebounddp_neg(r_X1, e_X1), r_X2, e_X2), (2 * (r_X2 * r_X3)), aebounddp_mul(2, 0, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3)))"
                    "e_X1" "((-(r_X1) * r_X2) - (2 * (r_X2 * r_X3)))"
                    "r_X1"
                    "Dsub(Dmul(Dneg(X1), X2), Dmul(RtoD(2), Dmul(X2, X3)))"
                    "X1"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Dsub_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_mul(-(r_X1), aebounddp_neg(r_X1, e_X1), r_X2, e_X2)"
                            "aebounddp_mul(2, 0, (r_X2 * r_X3), aebounddp_mul(r_X2, e_X2, r_X3, e_X3))"
                            "(-(r_X1) * r_X2)" "(2 * (r_X2 * r_X3))"
                            "Dmul(Dneg(X1), X2)"
                            "Dmul(RtoD(2), Dmul(X2, X3))"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "aebounddp_neg(r_X1, e_X1)"
                                    "e_X2"
                                    "-(r_X1)"
                                    "r_X2"
                                    "Dneg(X1)"
                                    "X2"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (then
                                      (lemma "Dneg_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X1"
                                           "r_X1"
                                           "X1"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (propax)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "0"
                                    "aebounddp_mul(r_X2, e_X2, r_X3, e_X3)"
                                    "2"
                                    "(r_X2 * r_X3)"
                                    "RtoD(2)"
                                    "Dmul(X2, X3)"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_X2"
                                           "e_X3"
                                           "r_X2"
                                           "r_X3"
                                           "X2"
                                           "X3"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (propax)
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (propax) (assert-condition)))
                   (assert-condition))))))
             (propax) (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Dneg const-decl
     "{f: unb_double | closest_double?(-(DtoR(f1)))(f)}" ieee754dp_neg
     "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (Dneg_aerr formula-decl nil aerr754dp_neg "float/")
    (rigidBody1 const-decl "unb_double" rigidbody1 nil))
   shostak)))

