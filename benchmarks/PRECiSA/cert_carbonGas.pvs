% This file is automatically generated by PRECiSA 
% 2017-06-19 20:54:45.482285 UTC

cert_carbonGas: THEORY
BEGIN
IMPORTING PRECiSA@strategies, carbonGas

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

carbonGas_0 : LEMMA
FORALL(e_V: nonneg_real, r_V: real, V: unb_double):
abs(DtoR(V) - r_V)<=e_V
AND ((((r_V /= 0) AND (DtoR(V) /= 0)) AND (((r_V + e_V) < 0) OR ((r_V - e_V) > 0))) AND (((r_V /= 0) AND (DtoR(V) /= 0)) AND (((r_V + e_V) < 0) OR ((r_V - e_V) > 0))))
AND TRUE
IMPLIES
abs(DtoR(carbonGas(V)) - (((35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))) * (r_V - (1000 * (427 / 10000000)))) - ((13806503 / 1000000000000000000000000000000) * (1000 * 300))))<=aebounddp_sub(((35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))) * (r_V - (1000 * (427 / 10000000)))), aebounddp_mul((35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))), aebounddp_add(35000000, 0, ((401 / 1000) * ((1000 / r_V) * (1000 / r_V))), aebounddp_mul((401 / 1000), (13 / 562949953421312000), ((1000 / r_V) * (1000 / r_V)), aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V)))), (r_V - (1000 * (427 / 10000000))), aebounddp_sub(r_V, e_V, (1000 * (427 / 10000000)), aebounddp_mul(1000, 0, (427 / 10000000), (13123 / 11529215046068469760000000)))), ((13806503 / 1000000000000000000000000000000) * (1000 * 300)), aebounddp_mul((13806503 / 1000000000000000000000000000000), (158966299189426689359 / 158456325028528675187087900672000000000000000000000000000000), (1000 * 300), aebounddp_mul(1000, 0, 300, 0)))

%|- carbonGas_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "carbonGas" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul((35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))), aebounddp_add(35000000, 0, ((401 / 1000) * ((1000 / r_V) * (1000 / r_V))), aebounddp_mul((401 / 1000), (13 / 562949953421312000), ((1000 / r_V) * (1000 / r_V)), aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V)))), (r_V - (1000 * (427 / 10000000))), aebounddp_sub(r_V, e_V, (1000 * (427 / 10000000)), aebounddp_mul(1000, 0, (427 / 10000000), (13123 / 11529215046068469760000000))))"
%|-    "aebounddp_mul((13806503 / 1000000000000000000000000000000), (158966299189426689359 / 158456325028528675187087900672000000000000000000000000000000), (1000 * 300), aebounddp_mul(1000, 0, 300, 0))"
%|-    "((35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))) * (r_V - (1000 * (427 / 10000000))))"
%|-    "((13806503 / 1000000000000000000000000000000) * (1000 * 300))"
%|-    "Dmul(Dadd(RtoD(35000000), Dmul(RtoD((401 / 1000)), Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V)))), Dsub(V, Dmul(RtoD(1000), RtoD((427 / 10000000)))))"
%|-    "Dmul(RtoD((13806503 / 1000000000000000000000000000000)), Dmul(RtoD(1000), RtoD(300)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add(35000000, 0, ((401 / 1000) * ((1000 / r_V) * (1000 / r_V))), aebounddp_mul((401 / 1000), (13 / 562949953421312000), ((1000 / r_V) * (1000 / r_V)), aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V))))"
%|-    "aebounddp_sub(r_V, e_V, (1000 * (427 / 10000000)), aebounddp_mul(1000, 0, (427 / 10000000), (13123 / 11529215046068469760000000)))"
%|-    "(35000000 + ((401 / 1000) * ((1000 / r_V) * (1000 / r_V))))"
%|-    "(r_V - (1000 * (427 / 10000000)))"
%|-    "Dadd(RtoD(35000000), Dmul(RtoD((401 / 1000)), Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V))))"
%|-    "Dsub(V, Dmul(RtoD(1000), RtoD((427 / 10000000))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_mul((401 / 1000), (13 / 562949953421312000), ((1000 / r_V) * (1000 / r_V)), aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V)))"
%|-    "35000000"
%|-    "((401 / 1000) * ((1000 / r_V) * (1000 / r_V)))"
%|-    "RtoD(35000000)"
%|-    "Dmul(RtoD((401 / 1000)), Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(13 / 562949953421312000)"
%|-    "aebounddp_mul((1000 / r_V), aebounddp_div(1000, 0, r_V, e_V), (1000 / r_V), aebounddp_div(1000, 0, r_V, e_V))"
%|-    "(401 / 1000)"
%|-    "((1000 / r_V) * (1000 / r_V))"
%|-    "RtoD((401 / 1000))"
%|-    "Dmul(Ddiv(RtoD(1000), V), Ddiv(RtoD(1000), V))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_div(1000, 0, r_V, e_V)"
%|-    "aebounddp_div(1000, 0, r_V, e_V)"
%|-    "(1000 / r_V)"
%|-    "(1000 / r_V)"
%|-    "Ddiv(RtoD(1000), V)"
%|-    "Ddiv(RtoD(1000), V)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "e_V"
%|-    "1000"
%|-    "r_V"
%|-    "RtoD(1000)"
%|-    "V"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "e_V"
%|-    "1000"
%|-    "r_V"
%|-    "RtoD(1000)"
%|-    "V"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_V"
%|-    "aebounddp_mul(1000, 0, (427 / 10000000), (13123 / 11529215046068469760000000))"
%|-    "r_V"
%|-    "(1000 * (427 / 10000000))"
%|-    "V"
%|-    "Dmul(RtoD(1000), RtoD((427 / 10000000)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "(13123 / 11529215046068469760000000)"
%|-    "1000"
%|-    "(427 / 10000000)"
%|-    "RtoD(1000)"
%|-    "RtoD((427 / 10000000))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(158966299189426689359 / 158456325028528675187087900672000000000000000000000000000000)"
%|-    "aebounddp_mul(1000, 0, 300, 0)"
%|-    "(13806503 / 1000000000000000000000000000000)"
%|-    "(1000 * 300)"
%|-    "RtoD((13806503 / 1000000000000000000000000000000))"
%|-    "Dmul(RtoD(1000), RtoD(300))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "1000"
%|-    "300"
%|-    "RtoD(1000)"
%|-    "RtoD(300)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_carbonGas