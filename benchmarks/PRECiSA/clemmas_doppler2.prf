(clemmas_doppler2
 (dop1_c_0_TCC1 0
  (dop1_c_0_TCC1-1 nil 3699379390 ("" (precisa-gen-cert-tcc) nil nil)
   ((real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (dop1_c_0 0
  (dop1_c_0-1 nil 3699379391
   ("" (prove-concrete-lemma$ dop1_0) nil nil)
   ((real_div_nzreal_is_real application-judgement "real" reals nil)
    (minus_real_is_real application-judgement "real" reals nil)
    (real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (nnreal_plus_posreal_is_posreal application-judgement "posreal"
     real_types nil)
    (> const-decl "bool" reals nil)
    (iar_329 skolem-const-decl "(brel?)" clemmas_doppler2 nil)
    (FUN adt-constructor-decl
     "[[pre: (Precondition?), opf: [real -> real],
  {F: [Interval -> Interval] |
           Inclusion?(pre, opf)(F) AND Fundamental?(pre)(F)},
  RealExpr] ->
   (fun?)]" IntervalExpr_adt "interval_arith/")
    (DIV adt-constructor-decl "[[RealExpr, RealExpr] -> (div?)]"
     IntervalExpr_adt "interval_arith/")
    (aebounddp_add_ia const-decl "Interval" bbiadp_add "PRECiSA/")
    (aebounddp_add_safe const-decl "real" bbiadp_add "PRECiSA/")
    (FUN2 adt-constructor-decl
     "[[pre1: (Precondition?), pre2: (Precondition2?),
  opf2: [[real, real] -> real],
  {F: [[Interval, Interval] -> Interval] |
           Inclusion2?(pre1, pre2, opf2)(F) AND
            Fundamental2?(pre1, pre2)(F)},
  RealExpr, RealExpr] ->
   (fun2?)]" IntervalExpr_adt "interval_arith/")
    (aebounddp_mul_ia const-decl "Interval" bbiadp_mul "PRECiSA/")
    (aebounddp_mul_safe const-decl "real" bbiadp_mul "PRECiSA/")
    (pre1to4d const-decl "(Precondition4?)" interval "interval_arith/")
    (X const-decl "RealExpr" interval_expr "interval_arith/")
    (integer_pred const-decl "[rational -> boolean]" integers nil)
    (rational nonempty-type-from-decl nil rationals nil)
    (rational_pred const-decl "[real -> boolean]" rationals nil)
    (r2E const-decl "RealExpr" interval_expr "interval_arith/")
    (ADD adt-constructor-decl "[[RealExpr, RealExpr] -> (add?)]"
     IntervalExpr_adt "interval_arith/")
    (NEG adt-constructor-decl "[RealExpr -> (neg?)]" IntervalExpr_adt
     "interval_arith/")
    (MULT adt-constructor-decl "[[RealExpr, RealExpr] -> (mult?)]"
     IntervalExpr_adt "interval_arith/")
    (FUN4 adt-constructor-decl
     "[[pre1: (Precondition?), pre2: (Precondition2?), pre3: (Precondition3?),
  pre4: (Precondition4?), opf4: [[real, real, real, real] -> real],
  {F: [[Interval, Interval, Interval, Interval] -> Interval] |
           Inclusion4?(pre1, pre2, pre3, pre4, opf4)(F) AND
            Fundamental4?(pre1, pre2, pre3, pre4)(F)},
  RealExpr, RealExpr, RealExpr, RealExpr] ->
   (fun4?)]" IntervalExpr_adt "interval_arith/")
    (Precondition4? const-decl "bool" interval "interval_arith/")
    (Precondition3? const-decl "bool" interval "interval_arith/")
    (BREL adt-constructor-decl
     "[[RealOrder, RealExpr, RealExpr] -> (brel?)]" IntervalExpr_adt
     "interval_arith/")
    (brel? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (RealExpr type-eq-decl nil IntervalExpr_adt "interval_arith/")
    (fun4? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (letin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun2? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (fun? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (div? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (pow? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sq? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (mult? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (sub? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (neg? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (abs? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (add? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (varidx? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (const? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (RealOrder type-eq-decl nil real_orders "reals/")
    (realorder? const-decl "bool" real_orders "reals/")
    (IntervalExpr type-decl nil IntervalExpr_adt "interval_arith/")
    (TRUE const-decl "bool" booleans nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (bijective? const-decl "bool" functions nil)
    (Ulp_dp_Fundamental name-judgement "(Fundamental?(PreTrue))"
     interval_ulp_dp "PRECiSA/")
    (Ulp_dp_Inclusion name-judgement "(Inclusion?(PreTrue, ulp_dp))"
     interval_ulp_dp "PRECiSA/")
    (AEB_ADD_j name-judgement
     "{F: [[Interval, Interval, Interval, Interval] -> Interval] |
         Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?),
                     aebounddp_add_safe)
                    (F)
          AND
          Fundamental4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?))
                       (F)}" bbiadp_add "PRECiSA/")
    (AEB_NEG_inclusion_j name-judgement
     "(Inclusion2?(Any?, pre1to2b(NonNeg?), aebounddp_neg_safe))"
     bbiadp_neg "PRECiSA/")
    (AEB_NEG_fundmental_j name-judgement
     "(Fundamental2?(Any?, pre1to2b(NonNeg?)))" bbiadp_neg "PRECiSA/")
    (AEB_MUL_j name-judgement
     "{F: [[Interval, Interval, Interval, Interval] -> Interval] |
         Inclusion4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?),
                     aebounddp_mul_safe)
                    (F)
          AND
          Fundamental4?(Any?, pre1to2b(NonNeg?), Any3?, pre1to4d(NonNeg?))
                       (F)}" bbiadp_mul "PRECiSA/")
    (NonNeg_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (AEB_DIV_inclusion_j name-judgement
     "(Inclusion4?(Any?, Any2?, Any3?, aeb_div_pre4, aebounddp_div_safe))"
     bbiadp_div "PRECiSA/")
    (AEB_DIV_fundmental_j name-judgement
     "(Fundamental4?(Any?, Any2?, Any3?, aeb_div_pre4))" bbiadp_div
     "PRECiSA/")
    (aeb_div_pre4_predondition_j name-judgement "(Precondition4?)"
     bbiasp_div "PRECiSA/")
    (Any3_Precondition3 name-judgement "(Precondition3?)" interval
     "interval_arith/")
    (Any_Precondition name-judgement "(Precondition?)" interval
     "interval_arith/")
    (Interval type-eq-decl nil interval "interval_arith/")
    (PRED type-eq-decl nil defined_types nil)
    (Precondition2? const-decl "bool" interval "interval_arith/")
    (Any2? const-decl "bool" interval "interval_arith/")
    (Inclusion4? const-decl "bool" interval "interval_arith/")
    (Any? const-decl "bool" interval "interval_arith/")
    (Any3? const-decl "bool" interval "interval_arith/")
    (aeb_div_pre4 const-decl "bool" bbiaXp_div "PRECiSA/")
    (aebounddp_div_safe const-decl "real" bbiadp_div "PRECiSA/")
    (aebounddp_div_ia const-decl "Interval" bbiadp_div "PRECiSA/")
    (Fundamental4? const-decl "bool" interval "interval_arith/")
    (Inclusion2? const-decl "bool" interval "interval_arith/")
    (Precondition? const-decl "bool" interval "interval_arith/")
    (pre1to2b const-decl "(Precondition2?)" interval "interval_arith/")
    (NonNeg? const-decl "bool" interval "interval_arith/")
    (aebounddp_neg_safe const-decl "real" bbiadp_neg "PRECiSA/")
    (aebounddp_neg_ia const-decl "Interval" bbiadp_neg "PRECiSA/")
    (Fundamental2? const-decl "bool" interval "interval_arith/")
    (Inclusion? const-decl "bool" interval "interval_arith/")
    (PreTrue const-decl "(Precondition?)" interval_expr
     "interval_arith/")
    (Ulp_dp const-decl "Interval" interval_ulp_dp "PRECiSA/")
    (Fundamental? const-decl "bool" interval "interval_arith/")
    (<< const-decl "bool" interval "interval_arith/")
    (even_times_int_is_even application-judgement "even_int" integers
     nil)
    (mult_divides1 application-judgement "(divides(n))" divides nil)
    (mult_divides2 application-judgement "(divides(m))" divides nil)
    (posint_exp application-judgement "posint" exponentiation nil)
    (nnrat_exp application-judgement "nnrat" exponentiation nil)
    (posrat_exp application-judgement "posrat" exponentiation nil)
    (posint_plus_nnint_is_posint application-judgement "posint"
     integers nil)
    (int_minus_int_is_int application-judgement "int" integers nil)
    (interval_soundness formula-decl nil interval_bandb
     "interval_arith/")
    (sound? const-decl "bool" interval_bandb "interval_arith/")
    (minus_nzrat_is_nzrat application-judgement "nzrat" rationals nil)
    (abs_le formula-decl nil abs_lems "reals/")
    (vars_in_box_rec def-decl
     "{b: bool | b = (FORALL (k: subrange(i, n - 1)): vs(k) ## nth(box, k - i))}"
     box "interval_arith/")
    (vars_in_box formula-decl nil box "interval_arith/")
    (iar_327 skolem-const-decl "(brel?)" clemmas_doppler2 nil)
    (|##| const-decl "bool" interval "interval_arith/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (eval def-decl "real" interval_expr "interval_arith/")
    (beval def-decl "bool" interval_bexpr "interval_arith/")
    (doppler2_r_U skolem-const-decl "real" clemmas_doppler2 nil)
    (doppler2_r_T skolem-const-decl "real" clemmas_doppler2 nil)
    (doppler2_r_V skolem-const-decl "real" clemmas_doppler2 nil)
    (list2array def-decl "T" array2list "structures/")
    (vars_in_box? const-decl "bool" box "interval_arith/")
    (Env type-eq-decl nil box "interval_arith/")
    (FALSE const-decl "bool" booleans nil)
    (Some adt-constructor-decl "[T -> (some?)]" Maybe "structures/")
    (null adt-constructor-decl "(null?)" list_adt nil)
    (null? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    ([\|\|] const-decl "Interval" interval "interval_arith/")
    (cons adt-constructor-decl "[[T, list] -> (cons?)]" list_adt nil)
    (alt_max const-decl "DirVar" gbandb_boolexpr "interval_arith/")
    (interval const-decl "Output" interval_bandb "interval_arith/")
    (Output type-eq-decl nil branch_and_bound "structures/")
    (DirVarSelector type-eq-decl nil branch_and_bound "structures/")
    (DirVarStack type-eq-decl nil branch_and_bound "structures/")
    (length def-decl "nat" list_props nil)
    (stack type-eq-decl nil stack "structures/")
    (DirVar type-eq-decl nil branch_and_bound "structures/")
    (ProperBox type-eq-decl nil box "interval_arith/")
    (ProperBox? const-decl "bool" box "interval_arith/")
    (Box type-eq-decl nil box "interval_arith/")
    (IntervalOutput type-eq-decl nil gbandb_boolexpr "interval_arith/")
    (val adt-accessor-decl "[(some?) -> T]" Maybe "structures/")
    (some? adt-recognizer-decl "[Maybe -> boolean]" Maybe
     "structures/")
    (cons? adt-recognizer-decl "[list -> boolean]" list_adt nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (BoolExpr type-eq-decl nil IntervalExpr_adt "interval_arith/")
    (bletin? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bite? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bincludes? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bimplies? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bor? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (band? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bnot? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (bconst? adt-recognizer-decl "[IntervalExpr -> boolean]"
     IntervalExpr_adt "interval_arith/")
    (every adt-def-decl "boolean" list_adt nil)
    (list type-decl nil list_adt nil)
    (Maybe type-decl nil Maybe "structures/")
    (listn_0 name-judgement "listn(0)" simple_bandb "interval_arith/")
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (dop1 const-decl "unb_double" doppler2 nil)
    (aebounddp_neg const-decl "nonneg_real" aerr754dp_neg "float/")
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div "float/")
    (<= const-decl "bool" reals nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (< const-decl "bool" reals nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_add const-decl "nonneg_real" aerr754dp_add "float/")
    (= const-decl "[T, T -> boolean]" equalities nil)
    (DtoR const-decl "real" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (FtoR const-decl "real" float "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dadd const-decl
     "{f: unb_double | closest_double?(FtoR(f1) + FtoR(f2))(f)}"
     ieee754dp_add "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (minus_even_is_even application-judgement "even_int" integers nil)
    (minus_nzint_is_nzint application-judgement "nzint" integers nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (nnreal_div_posreal_is_nnreal application-judgement "nnreal"
     real_types nil)
    (ulp_dp const-decl "nonneg_real" ieee754dp "float/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (number nonempty-type-decl nil numbers nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (bool nonempty-type-eq-decl nil booleans nil)
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (dop1_0 formula-decl nil cert_doppler2 nil))
   shostak)))

