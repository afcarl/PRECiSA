% This file is automatically generated by PRECiSA 
% 2017-03-25 17:04:20.598157 UTC

cert_sine: THEORY
BEGIN
IMPORTING PRECiSA@strategies, sine

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

sine_0 : LEMMA
FORALL(e_X: nonneg_real, r_X: real, X: unb_double):
abs(DtoR(X) - r_X)<=e_X
AND (((DtoR(RtoD(6)) /= 0) AND (((6 + 0) < 0) OR ((6 - 0) > 0))) AND (((DtoR(RtoD(120)) /= 0) AND (((120 + 0) < 0) OR ((120 - 0) > 0))) AND ((DtoR(RtoD(5040)) /= 0) AND (((5040 + 0) < 0) OR ((5040 - 0) > 0)))))
AND TRUE
IMPLIES
abs(DtoR(sine(X)) - (r_X - (((r_X * (r_X * r_X)) / 6) + (((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)))))<=aebounddp_sub(r_X, e_X, (((r_X * (r_X * r_X)) / 6) + (((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040))), aebounddp_add(((r_X * (r_X * r_X)) / 6), aebounddp_div((r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)), 6, 0), (((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)), aebounddp_sub(((r_X * (r_X * (r_X * (r_X * r_X)))) / 120), aebounddp_div((r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))), 120, 0), ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040), aebounddp_div((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))), 5040, 0))))

%|- sine_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "sine" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_add(((r_X * (r_X * r_X)) / 6), aebounddp_div((r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)), 6, 0), (((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)), aebounddp_sub(((r_X * (r_X * (r_X * (r_X * r_X)))) / 120), aebounddp_div((r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))), 120, 0), ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040), aebounddp_div((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))), 5040, 0)))"
%|-    "r_X"
%|-    "(((r_X * (r_X * r_X)) / 6) + (((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)))"
%|-    "X"
%|-    "Dadd(Ddiv(Dmul(X, Dmul(X, X)), RtoD(6)), Dsub(Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))), RtoD(120)), Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))), RtoD(5040))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_div((r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)), 6, 0)"
%|-    "aebounddp_sub(((r_X * (r_X * (r_X * (r_X * r_X)))) / 120), aebounddp_div((r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))), 120, 0), ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040), aebounddp_div((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))), 5040, 0))"
%|-    "((r_X * (r_X * r_X)) / 6)"
%|-    "(((r_X * (r_X * (r_X * (r_X * r_X)))) / 120) - ((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040))"
%|-    "Ddiv(Dmul(X, Dmul(X, X)), RtoD(6))"
%|-    "Dsub(Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))), RtoD(120)), Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))), RtoD(5040)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))"
%|-    "0"
%|-    "(r_X * (r_X * r_X))"
%|-    "6"
%|-    "Dmul(X, Dmul(X, X))"
%|-    "RtoD(6)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, r_X, e_X)"
%|-    "r_X"
%|-    "(r_X * r_X)"
%|-    "X"
%|-    "Dmul(X, X)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "e_X"
%|-    "r_X"
%|-    "r_X"
%|-    "X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_div((r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))), 120, 0)"
%|-    "aebounddp_div((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))), 5040, 0)"
%|-    "((r_X * (r_X * (r_X * (r_X * r_X)))) / 120)"
%|-    "((r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))) / 5040)"
%|-    "Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))), RtoD(120))"
%|-    "Ddiv(Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))), RtoD(5040))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))))"
%|-    "0"
%|-    "(r_X * (r_X * (r_X * (r_X * r_X))))"
%|-    "120"
%|-    "Dmul(X, Dmul(X, Dmul(X, Dmul(X, X))))"
%|-    "RtoD(120)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))"
%|-    "r_X"
%|-    "(r_X * (r_X * (r_X * r_X)))"
%|-    "X"
%|-    "Dmul(X, Dmul(X, Dmul(X, X)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))"
%|-    "r_X"
%|-    "(r_X * (r_X * r_X))"
%|-    "X"
%|-    "Dmul(X, Dmul(X, X))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, r_X, e_X)"
%|-    "r_X"
%|-    "(r_X * r_X)"
%|-    "X"
%|-    "Dmul(X, X)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "e_X"
%|-    "r_X"
%|-    "r_X"
%|-    "X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))))))"
%|-    "0"
%|-    "(r_X * (r_X * (r_X * (r_X * (r_X * (r_X * r_X))))))"
%|-    "5040"
%|-    "Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X))))))"
%|-    "RtoD(5040)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * (r_X * r_X)))), aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))))"
%|-    "r_X"
%|-    "(r_X * (r_X * (r_X * (r_X * (r_X * r_X)))))"
%|-    "X"
%|-    "Dmul(X, Dmul(X, Dmul(X, Dmul(X, Dmul(X, X)))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, (r_X * (r_X * (r_X * r_X))), aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))))"
%|-    "r_X"
%|-    "(r_X * (r_X * (r_X * (r_X * r_X))))"
%|-    "X"
%|-    "Dmul(X, Dmul(X, Dmul(X, Dmul(X, X))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, (r_X * (r_X * r_X)), aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X)))"
%|-    "r_X"
%|-    "(r_X * (r_X * (r_X * r_X)))"
%|-    "X"
%|-    "Dmul(X, Dmul(X, Dmul(X, X)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, (r_X * r_X), aebounddp_mul(r_X, e_X, r_X, e_X))"
%|-    "r_X"
%|-    "(r_X * (r_X * r_X))"
%|-    "X"
%|-    "Dmul(X, Dmul(X, X))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "aebounddp_mul(r_X, e_X, r_X, e_X)"
%|-    "r_X"
%|-    "(r_X * r_X)"
%|-    "X"
%|-    "Dmul(X, X)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "e_X"
%|-    "r_X"
%|-    "r_X"
%|-    "X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_sine