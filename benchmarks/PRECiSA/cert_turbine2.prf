(cert_turbine2
 (turbine2_0_TCC1 0
  (turbine2_0_TCC1-1 nil 3699198024 ("" (precisa-gen-cert-tcc) nil nil)
   ((boolean nonempty-type-decl nil booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (>= const-decl "bool" reals nil)
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (above nonempty-type-eq-decl nil integers nil)
    (Format type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (float type-eq-decl nil float "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (ge_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_ge_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (le_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_le_is_total_order name-judgement "(total_order?[real])"
     real_props nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (gt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_gt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (lt_realorder name-judgement "RealOrder" real_orders "reals/")
    (real_lt_is_strict_total_order name-judgement
     "(strict_total_order?[real])" real_props nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (real_minus_real_is_real application-judgement "real" reals nil))
   nil))
 (turbine2_0 0
  (turbine2_0-1 nil 3699198047
   (""
    (then (skeep) (expand "turbine2" :assert? none) (try-simp-ite)
     (then (lemma "Dsub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_sub((6 * r_V), aebounddp_mul(6, 0, r_V, e_V), (((1 / 2) * (r_V * ((r_W * r_W) * (r_R * r_R)))) / (1 - r_V)), aebounddp_div(((1 / 2) * (r_V * ((r_W * r_W) * (r_R * r_R)))), aebounddp_mul((1 / 2), (0 / 1), (r_V * ((r_W * r_W) * (r_R * r_R))), aebounddp_mul(r_V, e_V, ((r_W * r_W) * (r_R * r_R)), aebounddp_mul((r_W * r_W), aebounddp_mul(r_W, e_W, r_W, e_W), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)))), (1 - r_V), aebounddp_sub(1, 0, r_V, e_V)))"
            "(0 / 1)"
            "((6 * r_V) - (((1 / 2) * (r_V * ((r_W * r_W) * (r_R * r_R)))) / (1 - r_V)))"
            "(5 / 2)"
            "Dsub(Dmul(RtoD(6), V), Ddiv(Dmul(RtoD((1 / 2)), Dmul(V, Dmul(Dmul(W, W), Dmul(R, R)))), Dsub(RtoD(1), V)))"
            "RtoD((5 / 2))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Dsub_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label "aebounddp_mul(6, 0, r_V, e_V)"
                    "aebounddp_div(((1 / 2) * (r_V * ((r_W * r_W) * (r_R * r_R)))), aebounddp_mul((1 / 2), (0 / 1), (r_V * ((r_W * r_W) * (r_R * r_R))), aebounddp_mul(r_V, e_V, ((r_W * r_W) * (r_R * r_R)), aebounddp_mul((r_W * r_W), aebounddp_mul(r_W, e_W, r_W, e_W), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)))), (1 - r_V), aebounddp_sub(1, 0, r_V, e_V))"
                    "(6 * r_V)"
                    "(((1 / 2) * (r_V * ((r_W * r_W) * (r_R * r_R)))) / (1 - r_V))"
                    "Dmul(RtoD(6), V)"
                    "Ddiv(Dmul(RtoD((1 / 2)), Dmul(V, Dmul(Dmul(W, W), Dmul(R, R)))), Dsub(RtoD(1), V))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (then (lemma "Dmul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "0" "e_V" "6" "r_V"
                            "RtoD(6)" "V"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (eval-formulas + :quiet? t) (propax)
                             (assert-condition)))
                           (assert-condition))))))
                     (then (lemma "Ddiv_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label
                            "aebounddp_mul((1 / 2), (0 / 1), (r_V * ((r_W * r_W) * (r_R * r_R))), aebounddp_mul(r_V, e_V, ((r_W * r_W) * (r_R * r_R)), aebounddp_mul((r_W * r_W), aebounddp_mul(r_W, e_W, r_W, e_W), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R))))"
                            "aebounddp_sub(1, 0, r_V, e_V)"
                            "((1 / 2) * (r_V * ((r_W * r_W) * (r_R * r_R))))"
                            "(1 - r_V)"
                            "Dmul(RtoD((1 / 2)), Dmul(V, Dmul(Dmul(W, W), Dmul(R, R))))"
                            "Dsub(RtoD(1), V)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail))
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "(0 / 1)"
                                    "aebounddp_mul(r_V, e_V, ((r_W * r_W) * (r_R * r_R)), aebounddp_mul((r_W * r_W), aebounddp_mul(r_W, e_W, r_W, e_W), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)))"
                                    "(1 / 2)"
                                    "(r_V * ((r_W * r_W) * (r_R * r_R)))"
                                    "RtoD((1 / 2))"
                                    "Dmul(V, Dmul(Dmul(W, W), Dmul(R, R)))"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (then
                                      (lemma "Dmul_aerr")
                                      (let
                                       ((new-label (freshname "l")))
                                       (then
                                        (label new-label -1)
                                        (branch
                                         (with-tccs
                                          (inst
                                           new-label
                                           "e_V"
                                           "aebounddp_mul((r_W * r_W), aebounddp_mul(r_W, e_W, r_W, e_W), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R))"
                                           "r_V"
                                           "((r_W * r_W) * (r_R * r_R))"
                                           "V"
                                           "Dmul(Dmul(W, W), Dmul(R, R))"))
                                         ((branch
                                           (split -1)
                                           ((then (aerr-assert) (fail))
                                            (propax)
                                            (then
                                             (lemma "Dmul_aerr")
                                             (let
                                              ((new-label
                                                (freshname "l")))
                                              (then
                                               (label new-label -1)
                                               (branch
                                                (with-tccs
                                                 (inst
                                                  new-label
                                                  "aebounddp_mul(r_W, e_W, r_W, e_W)"
                                                  "aebounddp_mul(r_R, e_R, r_R, e_R)"
                                                  "(r_W * r_W)"
                                                  "(r_R * r_R)"
                                                  "Dmul(W, W)"
                                                  "Dmul(R, R)"))
                                                ((branch
                                                  (split -1)
                                                  ((then
                                                    (aerr-assert)
                                                    (fail))
                                                   (then
                                                    (lemma "Dmul_aerr")
                                                    (let
                                                     ((new-label
                                                       (freshname
                                                        "l")))
                                                     (then
                                                      (label
                                                       new-label
                                                       -1)
                                                      (branch
                                                       (with-tccs
                                                        (inst
                                                         new-label
                                                         "e_W"
                                                         "e_W"
                                                         "r_W"
                                                         "r_W"
                                                         "W"
                                                         "W"))
                                                       ((branch
                                                         (split -1)
                                                         ((then
                                                           (aerr-assert)
                                                           (fail))
                                                          (propax)
                                                          (propax)
                                                          (assert-condition)))
                                                        (assert-condition))))))
                                                   (then
                                                    (lemma "Dmul_aerr")
                                                    (let
                                                     ((new-label
                                                       (freshname
                                                        "l")))
                                                     (then
                                                      (label
                                                       new-label
                                                       -1)
                                                      (branch
                                                       (with-tccs
                                                        (inst
                                                         new-label
                                                         "e_R"
                                                         "e_R"
                                                         "r_R"
                                                         "r_R"
                                                         "R"
                                                         "R"))
                                                       ((branch
                                                         (split -1)
                                                         ((then
                                                           (aerr-assert)
                                                           (fail))
                                                          (propax)
                                                          (propax)
                                                          (assert-condition)))
                                                        (assert-condition))))))
                                                   (assert-condition)))
                                                 (assert-condition))))))
                                            (assert-condition)))
                                          (assert-condition))))))
                                     (assert-condition)))
                                   (assert-condition))))))
                             (then (lemma "Dsub_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "0"
                                    "e_V"
                                    "1"
                                    "r_V"
                                    "RtoD(1)"
                                    "V"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (eval-formulas + :quiet? t)
                                     (propax)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (eval-formulas + :quiet? t) (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_div_nzreal_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (/= const-decl "boolean" notequal nil)
    (+ const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (aebounddp_sub const-decl "nonneg_real" aerr754dp_sub "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (< const-decl "bool" reals nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (number nonempty-type-decl nil numbers nil)
    (OR const-decl "[bool, bool -> bool]" booleans nil)
    (NOT const-decl "[bool -> bool]" booleans nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (boolean nonempty-type-decl nil booleans nil)
    (posreal_plus_nnreal_is_posreal application-judgement "posreal"
     real_types nil)
    (nnrat_div_posrat_is_nnrat application-judgement "nonneg_rat"
     rationals nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Ddiv const-decl
     "{f: unb_double | closest_double?(FtoR(f1) / FtoR(f2))(f)}"
     ieee754dp_div "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (aebounddp_div const-decl "nonneg_real" aerr754dp_div "float/")
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (Ddiv_aerr formula-decl nil aerr754dp_div "float/")
    (<= const-decl "bool" reals nil)
    (IMPLIES const-decl "[bool, bool -> bool]" booleans nil)
    (minus_odd_is_odd application-judgement "odd_int" integers nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (> const-decl "bool" reals nil)
    (turbine2 const-decl "unb_double" turbine2 nil))
   shostak)))

