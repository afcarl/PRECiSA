(cert_sineOrder3
 (sineOrder3_0 0
  (sineOrder3_0-1 nil 3699198048
   (""
    (then (skeep) (expand "sineOrder3" :assert? none) (try-simp-ite)
     (then (lemma "Dsub_aerr")
      (let ((new-label (freshname "l")))
        (then (label new-label -1)
         (branch
          (with-tccs
           (inst new-label
            "aebounddp_mul((238732414637843 / 250000000000000), (1246446333 / 68719476736000000000000000), r_Z, e_Z)"
            "aebounddp_mul((6450306886639899 / 50000000000000000), (52491429563 / 27487790694400000000000000000), (r_Z * (r_Z * r_Z)), aebounddp_mul(r_Z, e_Z, (r_Z * r_Z), aebounddp_mul(r_Z, e_Z, r_Z, e_Z)))"
            "((238732414637843 / 250000000000000) * r_Z)"
            "((6450306886639899 / 50000000000000000) * (r_Z * (r_Z * r_Z)))"
            "Dmul(RtoD((238732414637843 / 250000000000000)), Z)"
            "Dmul(RtoD((6450306886639899 / 50000000000000000)), Dmul(Z, Dmul(Z, Z)))"))
          ((branch (split -1)
            ((then (aerr-assert) (fail))
             (then (lemma "Dmul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "(1246446333 / 68719476736000000000000000)" "e_Z"
                    "(238732414637843 / 250000000000000)" "r_Z"
                    "RtoD((238732414637843 / 250000000000000))" "Z"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t) (propax)
                     (assert-condition)))
                   (assert-condition))))))
             (then (lemma "Dmul_aerr")
              (let ((new-label (freshname "l")))
                (then (label new-label -1)
                 (branch
                  (with-tccs
                   (inst new-label
                    "(52491429563 / 27487790694400000000000000000)"
                    "aebounddp_mul(r_Z, e_Z, (r_Z * r_Z), aebounddp_mul(r_Z, e_Z, r_Z, e_Z))"
                    "(6450306886639899 / 50000000000000000)"
                    "(r_Z * (r_Z * r_Z))"
                    "RtoD((6450306886639899 / 50000000000000000))"
                    "Dmul(Z, Dmul(Z, Z))"))
                  ((branch (split -1)
                    ((then (aerr-assert) (fail))
                     (eval-formulas + :quiet? t)
                     (then (lemma "Dmul_aerr")
                      (let ((new-label (freshname "l")))
                        (then (label new-label -1)
                         (branch
                          (with-tccs
                           (inst new-label "e_Z"
                            "aebounddp_mul(r_Z, e_Z, r_Z, e_Z)" "r_Z"
                            "(r_Z * r_Z)" "Z" "Dmul(Z, Z)"))
                          ((branch (split -1)
                            ((then (aerr-assert) (fail)) (propax)
                             (then (lemma "Dmul_aerr")
                              (let ((new-label (freshname "l")))
                                (then
                                 (label new-label -1)
                                 (branch
                                  (with-tccs
                                   (inst
                                    new-label
                                    "e_Z"
                                    "e_Z"
                                    "r_Z"
                                    "r_Z"
                                    "Z"
                                    "Z"))
                                  ((branch
                                    (split -1)
                                    ((then (aerr-assert) (fail))
                                     (propax)
                                     (propax)
                                     (assert-condition)))
                                   (assert-condition))))))
                             (assert-condition)))
                           (assert-condition))))))
                     (assert-condition)))
                   (assert-condition))))))
             (assert-condition)))
           (assert-condition)))))))
    nil nil)
   ((real_plus_real_is_real application-judgement "real" reals nil)
    (real_times_real_is_real application-judgement "real" reals nil)
    (real_minus_real_is_real application-judgement "real" reals nil)
    (Dsub_aerr formula-decl nil aerr754dp_sub "float/")
    (RtoD const-decl "{f: unb_double | closest_double?(x1)(f)}"
     ieee754dp "float/")
    (Dmul const-decl
     "{f: unb_double | closest_double?(FtoR(f1) * FtoR(f2))(f)}"
     ieee754dp_mul "float/")
    (FtoR const-decl "real" float "float/")
    (closest_double? const-decl "bool" ieee754dp "float/")
    (Fbounded? const-decl "bool" float "float/")
    (unb_double type-eq-decl nil ieee754dp "float/")
    (double_precision_format const-decl "Format" ieee754dp "float/")
    (Fcanonic? const-decl "bool" float "float/")
    (Format type-eq-decl nil float "float/")
    (above nonempty-type-eq-decl nil integers nil)
    (nat nonempty-type-eq-decl nil naturalnumbers nil)
    (float type-eq-decl nil float "float/")
    (int nonempty-type-eq-decl nil integers nil)
    (* const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (/ const-decl "[numfield, nznum -> numfield]" number_fields nil)
    (nznum nonempty-type-eq-decl nil number_fields nil)
    (/= const-decl "boolean" notequal nil)
    (numfield nonempty-type-eq-decl nil number_fields nil)
    (aebounddp_mul const-decl "nonneg_real" aerr754dp_mul "float/")
    (nonneg_real nonempty-type-eq-decl nil real_types nil)
    (>= const-decl "bool" reals nil)
    (bool nonempty-type-eq-decl nil booleans nil)
    (real nonempty-type-from-decl nil reals nil)
    (real_pred const-decl "[number_field -> boolean]" reals nil)
    (number_field nonempty-type-from-decl nil number_fields nil)
    (number_field_pred const-decl "[number -> boolean]" number_fields
     nil)
    (boolean nonempty-type-decl nil booleans nil)
    (number nonempty-type-decl nil numbers nil)
    (posrat_div_posrat_is_posrat application-judgement "posrat"
     rationals nil)
    (Dmul_aerr formula-decl nil aerr754dp_mul "float/")
    (bijective? const-decl "bool" functions nil)
    (id const-decl "(bijective?[T, T])" identity nil)
    (TRUE const-decl "bool" booleans nil)
    (Dsub const-decl
     "{f: unb_double | closest_double?(FtoR(f1) - FtoR(f2))(f)}"
     ieee754dp_sub "float/")
    (DtoR const-decl "real" ieee754dp "float/")
    (- const-decl "[numfield, numfield -> numfield]" number_fields nil)
    (abs const-decl "{n: nonneg_real | n >= m AND n >= -m}" real_defs
         nil)
    (- const-decl "[numfield -> numfield]" number_fields nil)
    (AND const-decl "[bool, bool -> bool]" booleans nil)
    (= const-decl "[T, T -> boolean]" equalities nil)
    (rtos_canonicroundfun_exactrepconservation_j name-judgement
     "{RtoF: CanonicRoundingFun(double_precision_format, dp_closest?) |
         exact_rep_conservation[2]
             (double_precision_format, dp_closest?)(RtoF)}" ieee754dp
     "float/")
    (sineOrder3 const-decl "unb_double" sineOrder3 nil))
   shostak)))

