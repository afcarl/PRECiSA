% This file is automatically generated by PRECiSA 
% 2017-06-19 21:00:49.229427 UTC

cert_turbine1: THEORY
BEGIN
IMPORTING PRECiSA@strategies, turbine1

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

turbine1_0 : LEMMA
FORALL(e_V, e_W, e_R: nonneg_real, r_V, r_W, r_R: real, V, W, R: unb_double):
abs(DtoR(V) - r_V)<=e_V AND abs(DtoR(W) - r_W)<=e_W AND abs(DtoR(R) - r_R)<=e_R
AND (((((r_R * r_R) /= 0) AND (DtoR(Dmul(R, R)) /= 0)) AND ((((r_R * r_R) + aebounddp_mul(r_R, e_R, r_R, e_R)) < 0) OR (((r_R * r_R) - aebounddp_mul(r_R, e_R, r_R, e_R)) > 0))) AND ((((1 < (ieee754dp_prec - Fexp(V))) AND ((1 - r_V) /= 0)) AND (DtoR(Dsub(RtoD(1), V)) /= 0)) AND ((((1 - r_V) + aebounddp_sub(1, 0, r_V, e_V)) < 0) OR (((1 - r_V) - aebounddp_sub(1, 0, r_V, e_V)) > 0))))
AND TRUE
IMPLIES
abs(DtoR(turbine1(V, W, R)) - ((((3 + 2) / (r_R * r_R)) - ((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))) / (1 - r_V))) - -9 / 2))<=aebounddp_sub((((3 + 2) / (r_R * r_R)) - ((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))) / (1 - r_V))), aebounddp_sub(((3 + 2) / (r_R * r_R)), aebounddp_div((3 + 2), aebounddp_add(3, 0, 2, 0), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)), ((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))) / (1 - r_V)), aebounddp_div((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))), aebounddp_mul(((1 / 8) * (3 - (2 * r_V))), aebounddp_mul((1 / 8), (0 / 1), (3 - (2 * r_V)), aebounddp_sub(3, 0, (2 * r_V), aebounddp_mul_p2(1, e_V))), (r_W * (r_W * (r_R * r_R))), aebounddp_mul(r_W, e_W, (r_W * (r_R * r_R)), aebounddp_mul(r_W, e_W, (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)))), (1 - r_V), aebounddp_sub(1, 0, r_V, e_V))), -9 / 2, (0 / 1))

%|- turbine1_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "turbine1" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_sub(((3 + 2) / (r_R * r_R)), aebounddp_div((3 + 2), aebounddp_add(3, 0, 2, 0), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)), ((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))) / (1 - r_V)), aebounddp_div((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))), aebounddp_mul(((1 / 8) * (3 - (2 * r_V))), aebounddp_mul((1 / 8), (0 / 1), (3 - (2 * r_V)), aebounddp_sub(3, 0, (2 * r_V), aebounddp_mul_p2(1, e_V))), (r_W * (r_W * (r_R * r_R))), aebounddp_mul(r_W, e_W, (r_W * (r_R * r_R)), aebounddp_mul(r_W, e_W, (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)))), (1 - r_V), aebounddp_sub(1, 0, r_V, e_V)))"
%|-    "(0 / 1)"
%|-    "(((3 + 2) / (r_R * r_R)) - ((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))) / (1 - r_V)))"
%|-    "-9 / 2"
%|-    "Dsub(Ddiv(Dadd(RtoD(3), RtoD(2)), Dmul(R, R)), Ddiv(Dmul(Dmul(RtoD((1 / 8)), Dsub(RtoD(3), Dmul(RtoD(2), V))), Dmul(W, Dmul(W, Dmul(R, R)))), Dsub(RtoD(1), V)))"
%|-    "RtoD(-9 / 2)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_div((3 + 2), aebounddp_add(3, 0, 2, 0), (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R))"
%|-    "aebounddp_div((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))), aebounddp_mul(((1 / 8) * (3 - (2 * r_V))), aebounddp_mul((1 / 8), (0 / 1), (3 - (2 * r_V)), aebounddp_sub(3, 0, (2 * r_V), aebounddp_mul_p2(1, e_V))), (r_W * (r_W * (r_R * r_R))), aebounddp_mul(r_W, e_W, (r_W * (r_R * r_R)), aebounddp_mul(r_W, e_W, (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)))), (1 - r_V), aebounddp_sub(1, 0, r_V, e_V))"
%|-    "((3 + 2) / (r_R * r_R))"
%|-    "((((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R)))) / (1 - r_V))"
%|-    "Ddiv(Dadd(RtoD(3), RtoD(2)), Dmul(R, R))"
%|-    "Ddiv(Dmul(Dmul(RtoD((1 / 8)), Dsub(RtoD(3), Dmul(RtoD(2), V))), Dmul(W, Dmul(W, Dmul(R, R)))), Dsub(RtoD(1), V))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_add(3, 0, 2, 0)"
%|-    "aebounddp_mul(r_R, e_R, r_R, e_R)"
%|-    "(3 + 2)"
%|-    "(r_R * r_R)"
%|-    "Dadd(RtoD(3), RtoD(2))"
%|-    "Dmul(R, R)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "0"
%|-    "3"
%|-    "2"
%|-    "RtoD(3)"
%|-    "RtoD(2)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_R"
%|-    "e_R"
%|-    "r_R"
%|-    "r_R"
%|-    "R"
%|-    "R"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(((1 / 8) * (3 - (2 * r_V))), aebounddp_mul((1 / 8), (0 / 1), (3 - (2 * r_V)), aebounddp_sub(3, 0, (2 * r_V), aebounddp_mul_p2(1, e_V))), (r_W * (r_W * (r_R * r_R))), aebounddp_mul(r_W, e_W, (r_W * (r_R * r_R)), aebounddp_mul(r_W, e_W, (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R))))"
%|-    "aebounddp_sub(1, 0, r_V, e_V)"
%|-    "(((1 / 8) * (3 - (2 * r_V))) * (r_W * (r_W * (r_R * r_R))))"
%|-    "(1 - r_V)"
%|-    "Dmul(Dmul(RtoD((1 / 8)), Dsub(RtoD(3), Dmul(RtoD(2), V))), Dmul(W, Dmul(W, Dmul(R, R))))"
%|-    "Dsub(RtoD(1), V)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul((1 / 8), (0 / 1), (3 - (2 * r_V)), aebounddp_sub(3, 0, (2 * r_V), aebounddp_mul_p2(1, e_V)))"
%|-    "aebounddp_mul(r_W, e_W, (r_W * (r_R * r_R)), aebounddp_mul(r_W, e_W, (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R)))"
%|-    "((1 / 8) * (3 - (2 * r_V)))"
%|-    "(r_W * (r_W * (r_R * r_R)))"
%|-    "Dmul(RtoD((1 / 8)), Dsub(RtoD(3), Dmul(RtoD(2), V)))"
%|-    "Dmul(W, Dmul(W, Dmul(R, R)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "(0 / 1)"
%|-    "aebounddp_sub(3, 0, (2 * r_V), aebounddp_mul_p2(1, e_V))"
%|-    "(1 / 8)"
%|-    "(3 - (2 * r_V))"
%|-    "RtoD((1 / 8))"
%|-    "Dsub(RtoD(3), Dmul(RtoD(2), V))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_mul_p2(1, e_V)"
%|-    "3"
%|-    "(2 * r_V)"
%|-    "RtoD(3)"
%|-    "Dmul(RtoD(2), V)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmulpow2l_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_V"
%|-    "r_V"
%|-    "V"
%|-    "1"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (try (branch (case "2^1=2") ((assert) (eval-formulas + :quiet? t))) (skip) (then (aerr-assert) (fail)))
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_W"
%|-    "aebounddp_mul(r_W, e_W, (r_R * r_R), aebounddp_mul(r_R, e_R, r_R, e_R))"
%|-    "r_W"
%|-    "(r_W * (r_R * r_R))"
%|-    "W"
%|-    "Dmul(W, Dmul(R, R))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_W"
%|-    "aebounddp_mul(r_R, e_R, r_R, e_R)"
%|-    "r_W"
%|-    "(r_R * r_R)"
%|-    "W"
%|-    "Dmul(R, R)"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_R"
%|-    "e_R"
%|-    "r_R"
%|-    "r_R"
%|-    "R"
%|-    "R"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dsub_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "e_V"
%|-    "1"
%|-    "r_V"
%|-    "RtoD(1)"
%|-    "V"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_turbine1