% This file is automatically generated by PRECiSA 
% 2017-06-19 20:56:34.731556 UTC

cert_predPrey: THEORY
BEGIN
IMPORTING PRECiSA@strategies, predPrey

%|- *_TCC* : PROOF
%|- (precisa-gen-cert-tcc)
%|- QED

predatorPrey_0 : LEMMA
FORALL(e_X: nonneg_real, r_X: real, X: unb_double):
abs(DtoR(X) - r_X)<=e_X
AND (((((2 < (ieee754dp_prec - Fexp(Dmul(X, X)))) AND (((DtoR(RtoD((111 / 100))) /= 0) AND ((((111 / 100) + (11 / 112589990684262400)) < 0) OR (((111 / 100) - (11 / 112589990684262400)) > 0))) AND ((DtoR(RtoD((111 / 100))) /= 0) AND ((((111 / 100) + (11 / 112589990684262400)) < 0) OR (((111 / 100) - (11 / 112589990684262400)) > 0))))) AND ((1 + ((r_X / (111 / 100)) * (r_X / (111 / 100)))) /= 0)) AND (DtoR(Dadd(RtoD(1), Dmul(Ddiv(X, RtoD((111 / 100))), Ddiv(X, RtoD((111 / 100)))))) /= 0)) AND ((((1 + ((r_X / (111 / 100)) * (r_X / (111 / 100)))) + aebounddp_add(1, 0, ((r_X / (111 / 100)) * (r_X / (111 / 100))), aebounddp_mul((r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)), (r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))))) < 0) OR (((1 + ((r_X / (111 / 100)) * (r_X / (111 / 100)))) - aebounddp_add(1, 0, ((r_X / (111 / 100)) * (r_X / (111 / 100))), aebounddp_mul((r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)), (r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))))) > 0)))
AND TRUE
IMPLIES
abs(DtoR(predatorPrey(X)) - ((4 * (r_X * r_X)) / (1 + ((r_X / (111 / 100)) * (r_X / (111 / 100))))))<=aebounddp_div((4 * (r_X * r_X)), aebounddp_mul_p2(2, aebounddp_mul(r_X, e_X, r_X, e_X)), (1 + ((r_X / (111 / 100)) * (r_X / (111 / 100)))), aebounddp_add(1, 0, ((r_X / (111 / 100)) * (r_X / (111 / 100))), aebounddp_mul((r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)), (r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)))))

%|- predatorPrey_0: PROOF
%|- (then
%|- (skeep)
%|- (expand "predatorPrey" :assert? none)
%|- (try-simp-ite)
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul_p2(2, aebounddp_mul(r_X, e_X, r_X, e_X))"
%|-    "aebounddp_add(1, 0, ((r_X / (111 / 100)) * (r_X / (111 / 100))), aebounddp_mul((r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)), (r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))))"
%|-    "(4 * (r_X * r_X))"
%|-    "(1 + ((r_X / (111 / 100)) * (r_X / (111 / 100))))"
%|-    "Dmul(RtoD(4), Dmul(X, X))"
%|-    "Dadd(RtoD(1), Dmul(Ddiv(X, RtoD((111 / 100))), Ddiv(X, RtoD((111 / 100)))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Dmulpow2l_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_mul(r_X, e_X, r_X, e_X)"
%|-    "(r_X * r_X)"
%|-    "Dmul(X, X)"
%|-    "2"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (try (branch (case "2^2=4") ((assert) (eval-formulas + :quiet? t))) (skip) (then (aerr-assert) (fail)))
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "e_X"
%|-    "r_X"
%|-    "r_X"
%|-    "X"
%|-    "X"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (propax)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Dadd_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "0"
%|-    "aebounddp_mul((r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)), (r_X / (111 / 100)), aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400)))"
%|-    "1"
%|-    "((r_X / (111 / 100)) * (r_X / (111 / 100)))"
%|-    "RtoD(1)"
%|-    "Dmul(Ddiv(X, RtoD((111 / 100))), Ddiv(X, RtoD((111 / 100))))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (eval-formulas + :quiet? t)
%|- (then
%|- (lemma "Dmul_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))"
%|-    "aebounddp_div(r_X, e_X, (111 / 100), (11 / 112589990684262400))"
%|-    "(r_X / (111 / 100))"
%|-    "(r_X / (111 / 100))"
%|-    "Ddiv(X, RtoD((111 / 100)))"
%|-    "Ddiv(X, RtoD((111 / 100)))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "(11 / 112589990684262400)"
%|-    "r_X"
%|-    "(111 / 100)"
%|-    "X"
%|-    "RtoD((111 / 100))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (then
%|- (lemma "Ddiv_aerr")
%|- (let ((new-label (freshname "l")))
%|-    (then (label new-label -1)
%|- (branch (with-tccs (inst new-label
%|-    "e_X"
%|-    "(11 / 112589990684262400)"
%|-    "r_X"
%|-    "(111 / 100)"
%|-    "X"
%|-    "RtoD((111 / 100))"
%|- ))
%|- ((branch
%|- (split -1)
%|- (
%|- (then (aerr-assert) (fail))
%|- (propax)
%|- (eval-formulas + :quiet? t)
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- (assert-condition)
%|- ))
%|- (assert-condition))))))
%|- )
%|- QED


END cert_predPrey