% This file is automatically generated by PRECiSA 
% 2017-03-25 17:04:38.463118 UTC

% maxDepth: 7 , prec: 10^-14 , displayPrec: 2

clgen_turbine3: THEORY
BEGIN

IMPORTING PRECiSA@bbiasp, PRECiSA@bbiadp, PRECiSA@precIOsa,  PRECiSA@strategies  

turbine3_r_R, turbine3_r_V, turbine3_r_W: real

turbine3_0_aeexpr : string = "aebounddp_sub((3 - ((2 / (turbine3_r_R * turbine3_r_R)) - (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V)))), aebounddp_sub(3, 0, ((2 / (turbine3_r_R * turbine3_r_R)) - (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V))), aebounddp_sub((2 / (turbine3_r_R * turbine3_r_R)), aebounddp_div(2, 0, (turbine3_r_R * turbine3_r_R), aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)), (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V)), aebounddp_div(((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))), aebounddp_mul((1 / 8), (0 / 1), ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R))), aebounddp_mul((1 + (2 * turbine3_r_V)), aebounddp_add(1, 0, (2 * turbine3_r_V), aebounddp_mul_p2(1, ulp_dp(turbine3_r_V)/2)), ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)), aebounddp_mul((turbine3_r_W * turbine3_r_W), aebounddp_mul(turbine3_r_W, ulp_dp(turbine3_r_W)/2, turbine3_r_W, ulp_dp(turbine3_r_W)/2), (turbine3_r_R * turbine3_r_R), aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)))), (1 - turbine3_r_V), aebounddp_sub(1, 0, turbine3_r_V, ulp_dp(turbine3_r_V)/2)))), (1 / 2), (0 / 1))"

turbine3_0_lemma_str : string = "turbine3_c_0 : LEMMA~%FORALL(turbine3_r_V, turbine3_r_W, turbine3_r_R: real, V, W, R: unb_double):~%abs(DtoR(V) - turbine3_r_V)<=ulp_dp(turbine3_r_V)/2 AND abs(DtoR(W) - turbine3_r_W)<=ulp_dp(turbine3_r_W)/2 AND abs(DtoR(R) - turbine3_r_R)<=ulp_dp(turbine3_r_R)/2~%AND (((((turbine3_r_R * turbine3_r_R) /= 0) AND (DtoR(Dmul(R, R)) /= 0)) AND ((((turbine3_r_R * turbine3_r_R) + aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)) < 0) OR (((turbine3_r_R * turbine3_r_R) - aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)) > 0))) AND ((((1 < (ieee754dp_prec - Fexp(V))) AND ((1 - turbine3_r_V) /= 0)) AND (DtoR(Dsub(RtoD(1), V)) /= 0)) AND ((((1 - turbine3_r_V) + aebounddp_sub(1, 0, turbine3_r_V, ulp_dp(turbine3_r_V)/2)) < 0) OR (((1 - turbine3_r_V) - aebounddp_sub(1, 0, turbine3_r_V, ulp_dp(turbine3_r_V)/2)) > 0))))~%AND TRUE~%AND turbine3_r_V ## [|-4.5,0.3|] AND  turbine3_r_W ## [|0.4,0.9|] AND  turbine3_r_R ## [|3.8,7.8|]~%IMPLIES~%abs(DtoR(turbine3(V, W, R)) - ((3 - ((2 / (turbine3_r_R * turbine3_r_R)) - (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V)))) - (1 / 2)))<= ~a~%"
                                 

turbine3_1_aeexpr : string = "aebounddp_sub((3 - ((2 / (turbine3_r_R * turbine3_r_R)) - (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V)))), aebounddp_sub(3, 0, ((2 / (turbine3_r_R * turbine3_r_R)) - (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V))), aebounddp_sub((2 / (turbine3_r_R * turbine3_r_R)), aebounddp_div(2, 0, (turbine3_r_R * turbine3_r_R), aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)), (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V)), aebounddp_div(((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))), aebounddp_mul((1 / 8), (0 / 1), ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R))), aebounddp_mul((1 + (2 * turbine3_r_V)), aebounddp_add(1, 0, (2 * turbine3_r_V), aebounddp_mul(2, 0, turbine3_r_V, ulp_dp(turbine3_r_V)/2)), ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)), aebounddp_mul((turbine3_r_W * turbine3_r_W), aebounddp_mul(turbine3_r_W, ulp_dp(turbine3_r_W)/2, turbine3_r_W, ulp_dp(turbine3_r_W)/2), (turbine3_r_R * turbine3_r_R), aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)))), (1 - turbine3_r_V), aebounddp_sub(1, 0, turbine3_r_V, ulp_dp(turbine3_r_V)/2)))), (1 / 2), (0 / 1))"

turbine3_1_lemma_str : string = "turbine3_c_1 : LEMMA~%FORALL(turbine3_r_V, turbine3_r_W, turbine3_r_R: real, V, W, R: unb_double):~%abs(DtoR(V) - turbine3_r_V)<=ulp_dp(turbine3_r_V)/2 AND abs(DtoR(W) - turbine3_r_W)<=ulp_dp(turbine3_r_W)/2 AND abs(DtoR(R) - turbine3_r_R)<=ulp_dp(turbine3_r_R)/2~%AND (((((turbine3_r_R * turbine3_r_R) /= 0) AND (DtoR(Dmul(R, R)) /= 0)) AND ((((turbine3_r_R * turbine3_r_R) + aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)) < 0) OR (((turbine3_r_R * turbine3_r_R) - aebounddp_mul(turbine3_r_R, ulp_dp(turbine3_r_R)/2, turbine3_r_R, ulp_dp(turbine3_r_R)/2)) > 0))) AND ((((1 >= (ieee754dp_prec - Fexp(V))) AND ((1 - turbine3_r_V) /= 0)) AND (DtoR(Dsub(RtoD(1), V)) /= 0)) AND ((((1 - turbine3_r_V) + aebounddp_sub(1, 0, turbine3_r_V, ulp_dp(turbine3_r_V)/2)) < 0) OR (((1 - turbine3_r_V) - aebounddp_sub(1, 0, turbine3_r_V, ulp_dp(turbine3_r_V)/2)) > 0))))~%AND TRUE~%AND turbine3_r_V ## [|-4.5,0.3|] AND  turbine3_r_W ## [|0.4,0.9|] AND  turbine3_r_R ## [|3.8,7.8|]~%IMPLIES~%abs(DtoR(turbine3(V, W, R)) - ((3 - ((2 / (turbine3_r_R * turbine3_r_R)) - (((1 / 8) * ((1 + (2 * turbine3_r_V)) * ((turbine3_r_W * turbine3_r_W) * (turbine3_r_R * turbine3_r_R)))) / (1 - turbine3_r_V)))) - (1 / 2)))<= ~a~%"
                                 
gen(sout: OStream, ranges:list[[string,ProperInterval]], maxdepth:nat, prec:posreal, displayprec:nat): void =
LET
max  :real = 0,
dummy:void = fprintf (sout, "% This file is automatically generated by PRECiSA ~%"),
dummy:void = fprintf (sout, "clemmas_turbine3: THEORY ~%"),
dummy:void = fprintf (sout, "BEGIN ~%"),
dummy:void = fprintf (sout, "IMPORTING cert_turbine3, PRECiSA@bbiasp, PRECiSA@bbiadp ~%"),
dummy:void = fprintf (sout, "~%%|- *_TCC* : PROOF"),
dummy:void = fprintf (sout, "~%%|- (precisa-gen-cert-tcc)"),
dummy:void = fprintf (sout, "~%%|- QED~%~%"),
dummy:void = printf ("Concrete bounds: ~%"),new  :real = fprint_concrete_lemma (sout)(turbine3_0_lemma_str, turbine3_0_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("turbine3_0", "turbine3_c_0") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("turbine3_0",new)),
new  :real = fprint_concrete_lemma (sout)(turbine3_1_lemma_str, turbine3_1_aeexpr, ranges, maxdepth, prec) ,
max  :real = IF(new>max) THEN new ELSE max ENDIF,
dummy:void = fprint_proof (sout)("turbine3_1", "turbine3_c_1") ,
dummy:void = printf(" - lemma ~a: ~-20/pvs:d/~%",("turbine3_1",new)),
dummy:void = fprintf (sout, "END clemmas_turbine3 ~%")IN
printf("Overall concrete bound: ~-20/pvs:d/~%",max)
main : void = 
LET sout = fopenout(create, "clemmas_turbine3.pvs"),
i1:ProperInterval = [|3.8,7.8|],
i2:ProperInterval = [|-4.5,0.3|],
i3:ProperInterval = [|0.4,0.9|] IN 
gen (sout, (: ("turbine3_r_R",i1), ("turbine3_r_V",i2), ("turbine3_r_W",i3) :), 7, 10^-14, 2) & fclose(sout) & printf("File succesfully generated.")

END clgen_turbine3