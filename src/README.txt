Copyright 2016 United States Government as represented by the Administrator of the National Aeronautics and Space Administration. All Rights Reserved.

No Warranty: THE SUBJECT SOFTWARE IS PROVIDED "AS IS" WITHOUT ANY WARRANTY OF ANY KIND, EITHER EXPRESSED, IMPLIED, OR STATUTORY, INCLUDING, BUT NOT LIMITED TO, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL CONFORM TO SPECIFICATIONS, ANY IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE, OR FREEDOM FROM INFRINGEMENT, ANY WARRANTY THAT THE SUBJECT SOFTWARE WILL BE ERROR FREE, OR ANY WARRANTY THAT DOCUMENTATION, IF PROVIDED, WILL CONFORM TO THE SUBJECT SOFTWARE. THIS AGREEMENT DOES NOT, IN ANY MANNER, CONSTITUTE AN ENDORSEMENT BY GOVERNMENT AGENCY OR ANY PRIOR RECIPIENT OF ANY RESULTS, RESULTING DESIGNS, HARDWARE, SOFTWARE PRODUCTS OR ANY OTHER APPLICATIONS RESULTING FROM USE OF THE SUBJECT SOFTWARE.  FURTHER, GOVERNMENT AGENCY DISCLAIMS ALL WARRANTIES AND LIABILITIES REGARDING THIRD-PARTY SOFTWARE, IF PRESENT IN THE ORIGINAL SOFTWARE, AND DISTRIBUTES IT "AS IS."

Waiver and Indemnity: RECIPIENT AGREES TO WAIVE ANY AND ALL CLAIMS AGAINST THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT.  IF RECIPIENT'S USE OF THE SUBJECT SOFTWARE RESULTS IN ANY LIABILITIES, DEMANDS, DAMAGES, EXPENSES OR LOSSES ARISING FROM SUCH USE, INCLUDING ANY DAMAGES FROM PRODUCTS BASED ON, OR RESULTING FROM, RECIPIENT'S USE OF THE SUBJECT SOFTWARE, RECIPIENT SHALL INDEMNIFY AND HOLD HARMLESS THE UNITED STATES GOVERNMENT, ITS CONTRACTORS AND SUBCONTRACTORS, AS WELL AS ANY PRIOR RECIPIENT, TO THE EXTENT PERMITTED BY LAW.  RECIPIENT'S SOLE REMEDY FOR ANY SUCH MATTER SHALL BE THE IMMEDIATE, UNILATERAL TERMINATION OF THIS AGREEMENT.


About PRECiSA
-------------

PRECiSA (Program Round-off Error Certifier via Static Analysis) is a fully automatic analyzer for the estimation of round-off errors of floating-point valued functional expressions.
The input to PRECiSA is a program composed of floating-point valued functions. In its current version, PRECiSA accepts a subset of the language of the Prototype Verification System (PVS), including LET expressions, IF-THEN-ELSE constructions, non-recursive function calls, and floating point values and operations such as: addition, multiplication, division, subtraction, floor, and square root.
The analysis process performed by PRECiSA results in two PVS theories: (1) a theory containing a collection of lemmas that states symbolic accumulated round-off error estimations for every possible control flow of each function in the input program, and (2) a theory that can be used as input to PVS in order to generate similar lemmas but stating concrete bounds when domains for the input variables of the program are given. All these lemmas are equipped with PVS proof scripts that automatically discharge them. The numerical bounds are computed using a formally verified branch-and-bound algorithm.
For more information about PRECiSA or for using our web-interface visit http://precisa.nianet.org/.


Prerequisites
-------------

In order to compile or interpret PRECiSA you will need the Glasgow Haskell Compiler (https://www.haskell.org/ghc/) which is available as part of the Haskell platform (https://www.haskell.org/platform/).
Furthermore, to generate the concrete bounds and to check the certificates, you will need PVS version 6.0 (http://pvs.csl.sri.com/) and the development version of the NASA PVS Library (https://github.com/nasa/pvslib).


How to use PRECiSA
------------------

This folder contains the Haskell source files implementing PRECiSA.
In the following, you can find the instructions to compile or interpret PRECiSA.

1) $ cd PRECiSA

1) $ mkdir results
This folder will be used to save the certificates generated by PRECiSA.

2a) COMPILING PRECiSA via GHC

To compile PRECiSA use the following command:

$ ghc PRECiSA.hs 

To use PRECiSA 
$ ./PRECiSA ".../<example>.pvs" ".../<example>.input" 4 14 2 False 40

The first parameter is the PVS program to be analyzed, while the second one indicates the initial values for the input variables of the input program.
The third, fourth and fifth parameters are options for the branch&bound search: the maximum depth, the precision and the displayed precision, respectively.
The sixth parameters is a boolean value indicating if the Stable Test Assumption is used (True) or not (False).
Finally, the last parameter is the maximum number of lemmas allowed to be generated by PRECiSA. This avoid to have certificates too big to be treated. If your program generates a huge number of lemmas, this means probably that you have several nested if-then-else. In this case, try to run PRECiSA with the Stable Test Assumption.

2b) INTERPRETING PRECiSA via GHCi

It is possible to interpret PRECiSA via the GHCi interpreter as follows:

$ ghci
GHCi, version 7.10.3: http://www.haskell.org/ghc/  :? for help
Prelude> :l PRECiSA.hs 

In order to use PRECiSA, run the function parseAndAnalysis with the same parameters explained above for the compiled version.

*Main> parseAndAnalysis ".../<example>.pvs" ".../<example>.input" 4 14  2 False  40

3)Once PVS and the PVS NASA Library have been installed in your system, you can use the proveit shell script to automatically check the proofs in the symbolic certificate generated in step 2. For example, if you analyzed the predefined program <example>.pvs, in the folder results you will find two files: cert_<example>.pvs and clgen_<example>.pvs.

To check the correctness of the PVS theories in cert_<example>.pvs you can run:

$ proveit -sc cert_<example>.pvs

In order to generate the concrete bound certificates, you can execute the following command:

$ pvsio @clgen_<example>:main

This process results in the generation of the file clemmas_<example>.pvs. You can find in that PVS theory the concrete bounds for every possible flow of each function, assuming the ranges provided for every input variable. To check the correctness of these lemmas, you can use the command proveit in a similar way:

$ proveit -sc clemmas_<example>.pvs

If any of these steps are not behaving as expected, try cleaning the PVS binaries in the NASA Library. Simply run cleanbin-all in the NASA Library folder of your installation and try again.
If the problem persists, please report it to mariano.moscato@nianet.org or to laura.titolo@nianet.org.
